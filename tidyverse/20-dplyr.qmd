---
title: "ミューテート・グループバイ・サマライズ"
---

```{r}
#| include: false
library(tidyverse)
```


## `dplyr` データ集計：列の作成、グループ化、要約

この資料では、データ分析のワークフローで最も重要ないくつかの「動詞」を学びます。
`dplyr` を使って新しい列を作成し、データをグループに分け、各グループの情報を要約する方法をマスターしましょう。

- `mutate()`: 既存の列から新しい列を作成する
- `group_by()`: 分析の単位となるグループを宣言する
- `summarise()`: グループごとにデータを要約する

この 3 つの関数は、データから洞察を得るために頻繁に組み合わせて使われます。

```{r}
#| eval: false
library(tidyverse)
```

## mutate(): 新しい列を作成する

`mutate()` は、既存の列を使って計算を行い、その結果を新しい列として追加する関数です。
スプレッドシートで新しい数式列を追加する作業に似ています。

例1: `starwars` データセットで、身長(m)と体重(kg)からBMIを計算する

身長 `height` は cm 単位なので、m 単位に変換 `height / 100` してから計算します。

```{r}
starwars  |> 
  select(name, height, mass)  |> 
  mutate(
    height_m = height / 100,
    bmi = mass / (height_m ^ 2)
  )
```

ポイント: `mutate()` の中で作成した新しい列 (`height_m`) は、すぐに次の計算 (`bmi = ...`) で使うことができます。


## `group_by()`: グループ化を宣言する

`group_by()` は、データそのものを変更するのではなく、データに「これは〇〇ごとにグループ化されています」という印をつける関数です。
この後に続く `summarise()` などの処理が、データ全体に対してではなく、各グループに対して個別に行われるようになります。

例: `starwars` データセットを `species` (種族) ごとにグループ化する

```{r}
starwars |> group_by(species)
```

このコードを実行しても、データの見た目はほとんど変わりません。
しかし、出力の先頭に `Groups: species` と表示され、Rが内部でデータをグループとして認識していることがわかります。

## `summarise()`: グループごとに要約する

`summarise()` (または `summarize`) は、データ（またはグループ化されたデータ）を1行の要約統計量にまとめる（集計する）関数です。
`group_by()` と組み合わせることで、その真価を発揮します。

よく使われる要約関数：

- `n()`: グループの行数（データ数）を数える
- `mean()`: 平均値
- `sd()`: 標準偏差
- `min()`, `max()`: 最小値、最大値
- `sum()`: 合計値

重要: `mean()` などの計算で、データに `NA` (欠損値) が含まれていると結果が `NA` になってしまいます。
これを避けるために、引数に `na.rm = TRUE` (`NA`をリムーブ(無視)する) を指定するのが一般的です。

例: 各 `species` (種族) ごとに、キャラクターの数、平均身長、平均体重を計算する

```{r}
starwars |> 
  group_by(species) |> 
  summarise(
    count = n(),
    avg_height = mean(height, na.rm = TRUE),
    avg_mass = mean(mass, na.rm = TRUE)
  )
```

この処理により、元のデータが種族ごとの1行のサマリーに変換されました。
`group_by()` で指定した列 (`species`) と、`summarise()` で作成した新しい要約列だけが結果として残ります。

## 演習：すべてを繋げてみよう

**問題:**
キャラクターが2人以上登場する `homeworld` (出身惑星) について、惑星ごとの登場人数と、キャラクターの平均身長を計算してください。最後に、登場人数が多い順に結果を並べ替えてください。

**ヒント:**

1. `homeworld` で `group_by()` する
2. 登場人数 (`count = n()`) と平均身長 (`avg_height = mean(...)`) を `summarise()` で計算する
3. `filter()` で `count` が2以上の行だけを絞り込む
4. `arrange(desc(count))` で並べ替える







