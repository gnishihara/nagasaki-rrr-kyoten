---
title: "ベクトル・行列などの作り方"
---

これまでは、一つの値を一つのオブジェクトに格納する方法を学びました。しかし、実際のデータ分析では、複数の値をまとめて扱いたい場面がほとんどです。ここでは、そのための基本的な3つのデータ構造、ベクトル、リスト、行列を学びましょう。

## ベクトル (Vector)

ベクトルは、Rにおける最も基本的なデータ構造です。
同じ種類のデータ（例：すべて数値、すべて文字）を一直線に並べたものです。

ベクトルを作成するには、`c()` という関数を使います。
`c` は "combine" (組み合わせる) の略です。

```{r}
# 数値のベクトルを作成
numeric_vector <- c(10, 20, 30, 40, 50)
numeric_vector

# 文字列のベクトルを作成 (文字列は "" または '' で囲む)
character_vector <- c("apple", "banana", "cherry")
character_vector

# 論理値 (TRUE/FALSE) のベクトルを作成
logical_vector <- c(TRUE, FALSE, TRUE, TRUE)
logical_vector
```

**ベクトルの特徴：**

同じデータ型の要素しか含めることができません。
もし異なる型のデータを混ぜると、Rが自動的に型を変換します（例：数値と文字を混ぜると、すべて文字に変換されます）。

### ベクトルに対する操作

ベクトル全体に対して一度に計算を行うことができます。
これをベクトル化演算と呼び、Rの強力な特徴の一つです。

```{r}
# numeric_vector の各要素を2倍する
numeric_vector * 2

# numeric_vector の各要素に5を足す
numeric_vector + 5
```


## リスト (List) ️

リストは、ベクトルとは異なり、異なる種類のデータを一つのオブジェクトに格納できる、より柔軟なデータ構造です。
まるで、色々な種類の品物を入れられるショッピングカートのようです。

リストを作成するには、`list()` 関数を使います。

```{r}
# 数値、文字列、ベクトルを混在させたリストを作成
my_list <- list(
  name = "Taro",      # 文字列
  age = 30,           # 数値
  scores = c(85, 92, 78), # ベクトル
  is_student = TRUE   # 論理値
)

my_list
```

**リストの特徴：**

数値、文字列、ベクトル、さらには他のリストなど、何でも格納できます。

= を使って各要素に名前をつけることができます（例：`name = "Taro"`）。

## リストの要素へのアクセス

リストの特定の要素を取り出すには、`$` または `[[ ]]` を使います。

```{r}
# `$` を使って "name" 要素にアクセス
my_list$name

# `[[ ]]` を使って "scores" 要素にアクセス
my_list[["scores"]]
```

## 行列 (Matrix)

行列（マトリックス）は、ベクトルを2次元（行と列）に拡張したものです。スプレッドシートの表のように、データを行と列の形式で扱います。

行列を作成するには、`matrix()` 関数を使います。

```{r}
# 1から6までの数値を使って、2行3列の行列を作成
my_matrix <- matrix(c(1, 2, 3, 4, 5, 6), nrow = 2, ncol = 3)
my_matrix
```

**行列の特徴：**

ベクトルと同様に、すべての要素が同じデータ型でなければなりません。

`nrow` で行数を、`ncol` で列数を指定します。

## 行列の要素へのアクセス

行列の要素には、`[行番号, 列番号]` という形式でアクセスします。

```{r}
# 2行目の3列目の要素にアクセス
my_matrix[2, 3]

# 1行目のすべての要素にアクセス (列番号を空にする)
my_matrix[1, ]

# 2列目のすべての要素にアクセス (行番号を空にする)
my_matrix[, 2]
```

## 配列 (Array)

配列は、同じ種類のデータを3次元以上の構造で格納するためのオブジェクトです。行列がスプレッドシート1枚だとすれば、配列はそのスプレッドシートを何枚も重ねた「束」や「キューブ」のようなものだとイメージしてください。

配列を作成するには、array() 関数を使います。

```r
array(データ, dim = c(行数, 列数, 次元数, ...))
```

dim (dimensionsの略) 引数に、各次元の大きさをベクトルで指定するのがポイントです。

2つの「3行2列」の行列を重ねた、3次元の配列を作成してみましょう。

```{r}
# 1から12までの数値データを用意
data_vector <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)

# 3行 x 2列 x 2面 の配列を作成
my_array <- array(data_vector, dim = c(3, 2, 2))

my_array
```

実行すると、コンソールには2つの3x2行列が表示されます。これが dim = c(3, 2, 2) の意味するところです。

**配列の特徴：**

行列と同様に、すべての要素が同じデータ型でなければなりません。

`dim` を指定することで、2次元、3次元、4次元…と自由に次元を定義できます。

## 配列の要素へのアクセス

配列の要素へのアクセスは、行列の `[行, 列]` という指定をさらに拡張した形で行います。3次元配列の場合は `[行番号, 列番号, 面番号]` のようになります。

```{r}
# 1番目の面の、3行目の2列目の要素にアクセス
my_array[3, 2, 1]

# 2番目の面の、すべての要素（つまり2番目の行列全体）にアクセス
my_array[, , 2]

# すべての面の、1行目のすべての列にアクセス
my_array[1, , ]
```


## まとめ

- ベクトル：同じ型のデータを1次元に並べたもの	`c()`
- リスト：異なる型のデータを格納できるもの	`list()`
- 行列：同じ型のデータを2次元（行と列）に並べたもの	`matrix()`
- 配列: 同じ型のデータを `N` 次元に並べたもの `array()`


## 演習

1. あなたの好きな3つの果物の名前を要素に持つ、`favorite_fruits` という名前のベクトルを作成してください。
2. `name`（あなたの名前）、`height`（あなたの身長(cm)）、`favorite_number`（好きな数字）という3つの要素を持つ `my_profile` という名前のリストを作成してください。
3. `1`から`9`までの連続した整数を使って、3行3列の行列 `nine_matrix` を作成してください。
4. `1`から`27`までの連続した整数を使って、3行3列の行列が3つ重なった構造の3次元配列 `cube_array` を作成してください。
5. 作成した `cube_array` の3番目の行列（面）だけを取り出して表示してください。
6. `cube_array` の1番目の行列（面）の、2行目、2列目にある要素は何ですか？コードを書いて確認してみましょう。