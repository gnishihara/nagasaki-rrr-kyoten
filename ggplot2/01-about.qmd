---
title: "作図について"
---

```{r}
#| include: false
library(tidyverse)
```

R での作図には、大きく分けて2つの主要な方法があります。
R に元から組み込まれている **Base R** の作図システムと、`tidyverse` エコシステムの中核である `ggplot2` パッケージです。

## Base Rでの作図

R が誕生したときから存在する、伝統的な作図システムです。
`plot()` 関数でキャンバス (canvas, base layer) を用意し、その上に `points()` で点を追加し、`lines()` で線を追加します。

**メリット**

- 追加パッケージが不要: R をインストールすればすぐに使えます。
- 手軽で高速: シンプルなグラフを素早く描きたい場合に便利です。
- 柔軟性が高い: 細かい部分まで自由にカスタマイズできます。

**デメリット**

- コードが複雑になりがち: 見栄えの良い、複雑なグラフを作ろうとすると、コードが長くなりがちです。
- 見栄え: デフォルト（初期設定）の見た目は、`ggplot2` に比べてやや古風な印象を受けることがあります。
- データ構造の意識が必要: カテゴリごとに色を分けるといった処理を、自分で考えながらコードを書く必要があります。

```{r}
# carsデータセットを使い、スピードと停止距離の散布図を描く

plot(cars$speed, cars$dist,
     main = "車の速度と停止距離 (Base R)",
     xlab = "速度 (mph)",
     ylab = "停止距離 (ft)",
     pch = 19,      # 点の形を塗りつぶしの円に
     col = "blue"   # 点の色を青に
)
```


## `ggplot2` での作図

`ggplot2` は、`tidyverse`の一部として提供されている、非常に強力で人気の高い作図パッケージです。「グラフィックスの文法 (Grammar of Graphics)」という一貫した哲学に基づいており、「グラフとは、データ、座標系、そして点や線といった図形要素（ジオメトリ）の組み合わせである」と考えます。

LEGO ブロックのように、データ、エステティック (aesthetics) マッピング（変数をx軸、y軸、色、形などに割り当てる）、ジオメトリ (geometry) のパーツを `+` でつなぎ合わせてグラフを構築します。

**メリット**

- 一貫した文法: 一度文法を覚えれば、どんな種類のグラフでも同じ考え方で作成できます。
- 美しい仕上がり: デフォルトでも洗練された美しいグラフが描画されます。
- データ処理に強い: カテゴリごとの色分けや、グラフの分割（ファセット）が非常に簡単かつ直感的に行えます。
- コードの可読性が高い: 複雑なグラフでも、処理のレイヤーが `+` で繋がっているためコードが読みやすいです。

**デメリット**

- パッケージの読み込みが必要: `library(ggplot2)` または `library(tidyverse)` が必要です。
- 初期学習コスト `aes()`や`geom_\*()`といった独自の「文法」を最初に学ぶ必要があります。
- 単純なグラフには少し冗長: ごく単純なグラフを1つだけ描きたい場合、`Base R` よりコードが長くなることもあります。

```{r}
library(ggplot2)
# 同じ散布図をggplot2で描く
ggplot(data = cars, aes(x = speed, y = dist)) +
  geom_point(color = "blue", size = 3) +
  labs(
    title = "車の速度と停止距離 (ggplot2)",
    x = "速度 (mph)",
    y = "停止距離 (ft)"
  ) +
  theme_minimal()
```

