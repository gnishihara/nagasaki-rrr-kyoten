{
  "hash": "595e25ae162e95396bd0a985bcf09cc9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R関数の使い方と作り方\"\n---\n\nこれまでは、`c()` や `matrix()` といったRにあらかじめ用意されている組み込み関数を使ってきました。\n関数とは、特定の処理をひとまとめにした「道具」のようなものです。\n\nRの素晴らしい点は、この「道具」を自分で作れることです。\n同じような処理を何度も書く代わりに、一度だけ関数として定義しておけば、あとはその関数名を呼び出すだけで何度でも同じ処理を実行できます。\nこれにより、コードが整理され、間違いが減り、効率が劇的に向上します。\n\n## 関数とは？\n\n関数は、一連の命令をまとめた再利用可能なコードブロックです。\n\n- 入力（引数 - \"ひきすう\" と読みます） を受け取り、\n- 決められた処理を実行し、\n- 出力（返り値 - \"かえりち\"） を返します。\n\n自動販売機をイメージしてみてください。\n「お金」と「ボタン」という入力に対して、「ジュースを出す」という処理を行い、「ジュース」という出力を返します。\nこれが関数の基本的な考え方です。\n\n## 関数の使い方\n\nRで関数を自作するには、function() というキーワードを使います。\n\n**基本の形：**\n\n```r\n関数名 <- function(引数1, 引数2, ...) {\n  # ここに実行したい処理を書く\n  \n  return(最終的な結果) # return()で出力する値を指定\n}\n```\n\n**各部分の解説：**\n\n- 関数名: あなたが作る関数につける名前です。オブジェクト名と同じルールで命名します。\n- `function(引数, ...)`: 関数を定義する宣言です。`()` の中に、この関数が受け取る入力（引数）の名前をカンマで区切って書きます。\n- `{ }`: この波括弧で囲まれた部分が、関数の本体です。実行したい処理をこの中に記述します。\n- `return(値)`: 関数の処理結果として何を返す（出力する）かを指定します。`return()` を書かなくても、最後に評価された値が自動的に返り値となりますが、コードを分かりやすくするために明示的に書くことが推奨されます。\n\n## 簡単な関数を作って使ってみよう\n\n**2つの数値を足し算する関数**\n\n`add_numbers` という名前で、`a` と `b` という2つの数値を引数として受け取り、その合計を返す関数を作ってみましょう。\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 関数の定義\nadd_numbers <- function(a, b) {\n  result <- a + b\n  return(result)\n}\n```\n:::\n\n\nこのコードを実行しても、コンソールには何も表示されません。これは関数の「設計図」を作っただけで、まだ実行していないからです。\nEnvironment タブに関数名 `add_numbers` が追加されていることを確認してください。\n\n**作成した関数の使い方：**\n\n関数を使うことを「呼び出す (call)」と言います。関数名を書き、`()` の中に具体的な値（引数）を入れて実行します。\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 作成した関数を呼び出す\nsum1 <- add_numbers(a = 5, b = 10)\nsum1 # 結果を表示\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 15\n```\n\n\n:::\n\n```{.r .cell-code}\nsum2 <- add_numbers(100, 200) # 引数名は省略してもOK\nsum2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 300\n```\n\n\n:::\n:::\n\n\n## 引数のデフォルト値\n\n引数には、あらかじめデフォルト値を設定しておくことができます。これにより、関数を呼び出す際に引数が指定されなかった場合に、そのデフォルト値が自動的に使われます。\n\n**挨拶をする関数**\n\n\"Hello\" という挨拶をデフォルトにしつつ、\"Good morning\" など他の挨拶も指定できるようにしてみましょう。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# \"greeting\" 引数にデフォルト値を設定\ngreet <- function(name, greeting = \"Hello\") {\n  message <- paste(greeting, name, sep = \", \") # pasteは文字列を結合する関数\n  return(message)\n}\n\n# デフォルト値を使って呼び出す\ngreet(name = \"Alice\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Hello, Alice\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# デフォルト値を上書きして呼び出す\ngreet(name = \"Bob\", greeting = \"Good morning\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Good morning, Bob\"\n```\n\n\n:::\n:::\n\n\n## 演習\n\n1. 数値 `x` を引数として受け取り、その数値を2乗した結果を返す `square_number` という名前の関数を作成してください。\n2. 作成した `square_number` 関数を使って、`15` を`2`乗した結果を求めてください。\n3. 長方形の縦 `height` と横 `width` を引数として受け取り、その面積を計算して返す `calculate_rectangle_area` という関数を作成してください。\n4.作成した `calculate_rectangle_area` 関数を使い、縦が `20`、横が `30` の長方形の面積を計算してください。\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}