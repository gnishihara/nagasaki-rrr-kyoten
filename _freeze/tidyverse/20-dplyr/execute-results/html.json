{
  "hash": "2c070458afd1e6e94c10f3c888b75200",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"ミューテート・グループバイ・サマライズ\"\n---\n\n\n\n\n## `dplyr` データ集計：列の作成、グループ化、要約\n\nこの資料では、データ分析のワークフローで最も重要ないくつかの「動詞」を学びます。\n`dplyr` を使って新しい列を作成し、データをグループに分け、各グループの情報を要約する方法をマスターしましょう。\n\n- `mutate()`: 既存の列から新しい列を作成する\n- `group_by()`: 分析の単位となるグループを宣言する\n- `summarise()`: グループごとにデータを要約する\n\nこの 3 つの関数は、データから洞察を得るために頻繁に組み合わせて使われます。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n## mutate(): 新しい列を作成する\n\n`mutate()` は、既存の列を使って計算を行い、その結果を新しい列として追加する関数です。\nスプレッドシートで新しい数式列を追加する作業に似ています。\n\n例1: `starwars` データセットで、身長(m)と体重(kg)からBMIを計算する\n\n身長 `height` は cm 単位なので、m 単位に変換 `height / 100` してから計算します。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars  |> \n  select(name, height, mass)  |> \n  mutate(\n    height_m = height / 100,\n    bmi = mass / (height_m ^ 2)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 87 × 5\n   name               height  mass height_m   bmi\n   <chr>               <int> <dbl>    <dbl> <dbl>\n 1 Luke Skywalker        172    77     1.72  26.0\n 2 C-3PO                 167    75     1.67  26.9\n 3 R2-D2                  96    32     0.96  34.7\n 4 Darth Vader           202   136     2.02  33.3\n 5 Leia Organa           150    49     1.5   21.8\n 6 Owen Lars             178   120     1.78  37.9\n 7 Beru Whitesun Lars    165    75     1.65  27.5\n 8 R5-D4                  97    32     0.97  34.0\n 9 Biggs Darklighter     183    84     1.83  25.1\n10 Obi-Wan Kenobi        182    77     1.82  23.2\n# ℹ 77 more rows\n```\n\n\n:::\n:::\n\n\nポイント: `mutate()` の中で作成した新しい列 (`height_m`) は、すぐに次の計算 (`bmi = ...`) で使うことができます。\n\n\n## `group_by()`: グループ化を宣言する\n\n`group_by()` は、データそのものを変更するのではなく、データに「これは〇〇ごとにグループ化されています」という印をつける関数です。\nこの後に続く `summarise()` などの処理が、データ全体に対してではなく、各グループに対して個別に行われるようになります。\n\n例: `starwars` データセットを `species` (種族) ごとにグループ化する\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars |> group_by(species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 87 × 14\n# Groups:   species [38]\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n 1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu…\n 2 C-3PO       167    75 <NA>       gold       yellow         112   none  mascu…\n 3 R2-D2        96    32 <NA>       white, bl… red             33   none  mascu…\n 4 Darth V…    202   136 none       white      yellow          41.9 male  mascu…\n 5 Leia Or…    150    49 brown      light      brown           19   fema… femin…\n 6 Owen La…    178   120 brown, gr… light      blue            52   male  mascu…\n 7 Beru Wh…    165    75 brown      light      blue            47   fema… femin…\n 8 R5-D4        97    32 <NA>       white, red red             NA   none  mascu…\n 9 Biggs D…    183    84 black      light      brown           24   male  mascu…\n10 Obi-Wan…    182    77 auburn, w… fair       blue-gray       57   male  mascu…\n# ℹ 77 more rows\n# ℹ 5 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>\n```\n\n\n:::\n:::\n\n\nこのコードを実行しても、データの見た目はほとんど変わりません。\nしかし、出力の先頭に `Groups: species` と表示され、Rが内部でデータをグループとして認識していることがわかります。\n\n## `summarise()`: グループごとに要約する\n\n`summarise()` (または `summarize`) は、データ（またはグループ化されたデータ）を1行の要約統計量にまとめる（集計する）関数です。\n`group_by()` と組み合わせることで、その真価を発揮します。\n\nよく使われる要約関数：\n\n- `n()`: グループの行数（データ数）を数える\n- `mean()`: 平均値\n- `sd()`: 標準偏差\n- `min()`, `max()`: 最小値、最大値\n- `sum()`: 合計値\n\n重要: `mean()` などの計算で、データに `NA` (欠損値) が含まれていると結果が `NA` になってしまいます。\nこれを避けるために、引数に `na.rm = TRUE` (`NA`をリムーブ(無視)する) を指定するのが一般的です。\n\n例: 各 `species` (種族) ごとに、キャラクターの数、平均身長、平均体重を計算する\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars |> \n  group_by(species) |> \n  summarise(\n    count = n(),\n    avg_height = mean(height, na.rm = TRUE),\n    avg_mass = mean(mass, na.rm = TRUE)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 38 × 4\n   species   count avg_height avg_mass\n   <chr>     <int>      <dbl>    <dbl>\n 1 Aleena        1        79      15  \n 2 Besalisk      1       198     102  \n 3 Cerean        1       198      82  \n 4 Chagrian      1       196     NaN  \n 5 Clawdite      1       168      55  \n 6 Droid         6       131.     69.8\n 7 Dug           1       112      40  \n 8 Ewok          1        88      20  \n 9 Geonosian     1       183      80  \n10 Gungan        3       209.     74  \n# ℹ 28 more rows\n```\n\n\n:::\n:::\n\n\nこの処理により、元のデータが種族ごとの1行のサマリーに変換されました。\n`group_by()` で指定した列 (`species`) と、`summarise()` で作成した新しい要約列だけが結果として残ります。\n\n## 演習：すべてを繋げてみよう\n\n**問題:**\nキャラクターが2人以上登場する `homeworld` (出身惑星) について、惑星ごとの登場人数と、キャラクターの平均身長を計算してください。最後に、登場人数が多い順に結果を並べ替えてください。\n\n**ヒント:**\n\n1. `homeworld` で `group_by()` する\n2. 登場人数 (`count = n()`) と平均身長 (`avg_height = mean(...)`) を `summarise()` で計算する\n3. `filter()` で `count` が2以上の行だけを絞り込む\n4. `arrange(desc(count))` で並べ替える\n\n\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}