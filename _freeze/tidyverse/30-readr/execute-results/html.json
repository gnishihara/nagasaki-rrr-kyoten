{
  "hash": "beb0b415c2f30e50d2a703e25f338ba6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"データの読み書き\"\n---\n\n\n\n\nデータ分析の最初のステップは、分析したいデータをRに読み込むことです。\n`readr` は `tidyverse` の一部で、CSV ファイルのような「長方形」のテキストデータを R に高速かつ正確に読み込むためのパッケージです。\n\n**Base R** にも `read.csv()` という関数がありますが、`readr` を使うことには以下のようなメリットがあります。\n\n- 高速である\n- 読み込み中に進捗バーが表示される\n- 文字列を自動でファクター型に変換しない\n- より賢く列の型を推測してくれる\n\n## `read_csv()`・`write_csv()`: CSVファイルの読み書き\n\n最もよく使われるのが `read_csv()` 関数です。\nこれは、カンマ区切り（Comma Separated Values）のファイルを読み込み、`tibble` という `tidyverse` で使われるデータ形式に変換します。\n\nまずは `tidyverse` を読み込みます。\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n**基本的な使い方**\n\n使い方は非常にシンプルで、ファイルへのパス（場所）を引数として渡すだけです。\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 例として、まず R のデータフレームをCSVファイルとして書き出してみます\nsample_data <- tibble(\n  id = 1:3,\n  name = c(\"Alice\", \"Bob\", \"Charlie\"),\n  score = c(85.5, 92.0, 78.5)\n)\n```\n:::\n\n\nCSV を書き込むには、`write_csv()` を使います。\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 書き出したい tibble と書き込みたいパスとファイル名を渡します\nwrite_csv(sample_data, \"my_sample_data.csv\")\n```\n:::\n\n\nCSV のを読み込むには、`read_csv()` を使います。\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 今書き出したCSVファイルを読み込む\ndf <- read_csv(\"my_sample_data.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 3 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): name\ndbl (2): id, score\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\n# 読み込んだ結果を確認\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n     id name    score\n  <dbl> <chr>   <dbl>\n1     1 Alice    85.5\n2     2 Bob      92  \n3     3 Charlie  78.5\n```\n\n\n:::\n:::\n\n\n`read_csv()` を実行すると、各列がどのデータ型（chr, dbl, int など）として認識されたかがコンソールに表示されます。\n\n::: {.callout-note}\n## ファイルパスの問題\n\nRスクリプトで `read_csv(\"data/my_sample_data.csv\")` のようにファイルパスを指定すると、そのスクリプトを誰かと共有したり、別のPCで実行したり、ファイルの場所を移動したりした際に、パスが通らなくなりエラーが頻発します。\n\nこれは、Rがどのフォルダを基準にファイルを探しているか（ワーキングディレクトリ）が、実行環境によって変わってしまうためです。この問題を解決するために `setwd(\"C:/Users/...\")` のようにワーキングディレクトリを固定する方法もありますが、これは他の人のPCでは動かないため、悪い習慣とされています。\n\n## `here::here()` がすべてを解決\n\n`here` パッケージは、この問題をシンプルかつエレガントに解決します。\n\nメリット:\n\n- `setwd()` が不要になる: `setwd()` をスクリプトの冒頭に書く必要が一切なくなります。\n- どこでも動く: あなたの PC でも、同僚のPCでも、サーバー上でも、スクリプトを移動しても、同じコードがエラーなく動きます。\n- 共同作業が楽になる: **Git** などでプロジェクトを共有する際に、ファイルパスの違いを気にする必要がありません。\n- 直感的: プロジェクトのルート（一番上の階層）を基準にパスを組み立てるため、非常に分かりやすいです。\n\n`hereの仕組み`: `here` は、現在のスクリプトの場所から上の階層に向かって `.Rproj` ファイルや `.git` フォルダを探します。それらが見つかった場所を「プロジェクトのルート」と判断し、そこを基準点としてファイルへの絶対パスを安全に構築してくれるのです。\n:::\n\n### `here::here()` の使い方\n\n`here()` を使うための最も重要な前提は、作業を `RStudioプロジェクト` (`.Rproj` ファイル) で管理することです。\n\nまだインストールしていない場合は、一度だけコンソールで実行します。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"here\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInstalling package into '/usr/local/lib/R/site-library'\n(as 'lib' is unspecified)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nalso installing the dependency 'rprojroot'\n```\n\n\n:::\n:::\n\n\nでは、ファイルパスを組み立てましょう。\n\n`here(\"フォルダ名\", \"ファイル名\")` のように、プロジェクトのルートからの道のりをカンマで区切って指定します。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilename <- here::here(\"data\", \"my_sample_data.csv\")\nwrite_csv(sample_data, filename)\ndf <- read_csv(filename)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 3 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): name\ndbl (2): id, score\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n     id name    score\n  <dbl> <chr>   <dbl>\n1     1 Alice    85.5\n2     2 Bob      92  \n3     3 Charlie  78.5\n```\n\n\n:::\n:::\n\n\n:::{.callout-ntoe}\n\n`::` は、特定のパッケージに属する関数を直接指定して呼び出すための演算子です。\n`here::here() `は、「`here` という名前のパッケージの中にある `here` という名前の関数」という意味になります。\n\nなぜ `::` を使うのか？\n\n`::` を使うことには、主に2つの大きなメリットがあります。\n\n1. 関数の名前の衝突（競合）を避ける\n\nRでは、異なるパッケージが同じ名前の関数を持っていることがあります。\n例えば、`dplyr` パッケージとRの基本機能（`stats` パッケージ）は、どちらも `filter()` という名前の関数を持っています。\n\nもし `library(dplyr) `を実行せずに `filter()` を使うと、意図せず基本機能の `filter()` が動いてしまうかもしれません。`dplyr::filter()` と書けば、「`dplyr` の `filter()` を使います」と明示的に宣言できるため、このような混乱やエラーを防げます。\n\n2. コードの可読性が上がる\n\n`here::here()` と書かれているコードを見れば、誰でも「ああ、これは `here` パッケージの機能を使っているんだな」と一目で分かります。`library()` で一度にたくさんのパッケージを読み込むと、どの関数がどのパッケージ由来なのか分かりにくくなることがあります。\n:::\n\n\n## `read_tsv()`: TSVファイルを読み込む\n\n`read_tsv()` は、タブ区切り（Tab Separated Values）のファイルを読み込むための関数です。\n基本的な使い方は `read_csv()` と全く同じです。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilename = here::here(\"data\", \"my_sample_data.tsv\")\n# タブ区切りのファイルを作成\nwrite_tsv(sample_data, filename)\n\n# TSVファイルを読み込む\ndf_tsv <- read_tsv(filename)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 3 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): name\ndbl (2): id, score\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\ndf_tsv\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n     id name    score\n  <dbl> <chr>   <dbl>\n1     1 Alice    85.5\n2     2 Bob      92  \n3     3 Charlie  78.5\n```\n\n\n:::\n:::\n\n\n## `read_delim()`: 一般的な区切り文字ファイル\n\nもしあなたのデータがカンマやタブではなく、セミコロン(;)やパイプ(|)のような特殊な文字で区切られている場合は、`read_delim()` を使います。\n`delim` 引数で区切り文字を指定します。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilename = here::here(\"data\", \"my_sample_data.txt\")\n\n# セミコロン区切りのファイルを作成\nwrite_delim(sample_data, filename, delim = \";\")\n\n# セミコロン区切りのファイルを読み込む\ndf_delim <- read_delim(filename, delim = \";\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 3 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\nchr (1): name\ndbl (2): id, score\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\ndf_delim\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n     id name    score\n  <dbl> <chr>   <dbl>\n1     1 Alice    85.5\n2     2 Bob      92  \n3     3 Charlie  78.5\n```\n\n\n:::\n:::\n\n\n**列の型を自分で指定する**\n\n`readr` は賢く列の型を推測してくれますが、時々間違えることもあります（例：数値のはずが文字列として読み込まれる）。\nその場合は `col_types` 引数を使って、正しい型を手動で指定できます。\n\n`cols()` 関数の中に、列ごとに型を指定します。\n\n- `col_character()`: 文字列型\n- `col_integer()`: 整数型\n- `col_double()`: 小数を含む数値型\n- `col_logical()`: 論理値型 (`TRUE/FALSE`)\n\n例: `id` を文字列として、`score` を整数として読み込んでみる\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilename = here::here(\"data\", \"my_sample_data.csv\")\n\ndf_manual <- read_csv(\n  filename,\n  col_types = cols(\n    id = col_character(),\n    score = col_integer()\n  )\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat <- vroom(...)\n  problems(dat)\n```\n\n\n:::\n\n```{.r .cell-code}\ndf_manual\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  id    name    score\n  <chr> <chr>   <int>\n1 1     Alice      NA\n2 2     Bob        92\n3 3     Charlie    NA\n```\n\n\n:::\n:::\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}