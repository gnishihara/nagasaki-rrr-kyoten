{
  "hash": "865c50f81b973ebd965282b64d5495f8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"tidyverseについて\"\n---\n\n\n\nこれまでは、Rに元々備わっている基本的な機能（Base Rと呼ばれます）を学んできました。\nしかし、実際のデータ分析では、より効率的で直感的なツールが求められます。\n\nそこで登場するのが `tidyverse` です。\n`tidyverse` は単一のパッケージではなく、データサイエンスのために設計されたRパッケージの集合体です。\nデータ分析の一連の作業（読み込み、整形、可視化など）を、一貫した哲学のもとでスムーズに行えるように作られています。\n\n`tidyverse` は、データ分析のための洗練された「道具箱」や「作業場」だと考えてください。\n個々のツールが強力なだけでなく、互いに連携しやすいように設計されています。\n\n## `tidyverse` の哲学：「タイディデータ」\n\n`tidyverse` の中心には、タイディデータ (Tidy Data) という考え方があります。\nこれは、データを整理するためのシンプルなルールです。\n\n- 各変数は、それ自身の列を持つ。\n- 各観測は、それ自身の行を持つ。\n- 各タイプの観測ユニットは、それ自身のテーブルを持つ。\n\nこの一貫したデータ形式に整えることで、`tidyverse` の各ツールをスムーズに連携させることができるのです。\n\n## `tidyverse` の主要なパッケージたち\n\n`tidyverse` をインストールすると、データ分析で頻繁に使われる多くの便利パッケージが一度に利用可能になります。\nここでは特に重要なものをいくつか紹介します。\n\n- `dplyr` : データ操作の「動詞」集です。`filter()`（行の絞り込み）、`select()`（列の選択）、`mutate()`（新しい列の作成）、`arrange()`（並べ替え）、`summarise()`（要約）といった直感的な関数で、データを自在に操れます。\n- `ggplot2`: Rで最も有名で強力なデータ可視化パッケージです。「グラフィックスの文法」という考え方に基づいており、単純なグラフから非常に複雑で美しいグラフまで、柔軟に作成できます。\n- `readr`: CSVファイルなどの表形式データを高速かつ正確に読み込むためのパッケージです。Base Rの関数よりも使いやすく、安定しています。\n- `tidyr`: データを「タイディな」形式に整形するためのパッケージです。列と行の形式を変換する `pivot_longer()` や `pivot_wider()` などの関数を提供します。\n- `stringr`: 文字列（テキストデータ）の操作を簡単にするためのパッケージです。\n\n## 魔法のパイプ演算子 `%>%` または `|>`\n\n`tidyverse` のコードを特徴づけるのが、パイプ演算子 `%>%` です。\nこれは、左側の処理結果を、右側の関数の最初の引数として渡す役割をします。\n\nR のネイティブのパイプは `|>` ですが、どちらでも似たような使い方です。\n\nこれにより、複数の処理を上から下、左から右へと、まるで文章を読むように繋げて書くことができます。\n\n`%>%` はショートカットキー {{< kbd ctrl-shift-m >}} (Windows/Linux) または \n{{< kbd cmd-shift-m >}} (Mac) で簡単に入力できます。\n\n\n\n**パイプを使わない場合**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# diamondsデータセットから、カットが \"Premium\" のものを抜き出し、\n# その価格の平均を計算する\nsummarise(filter(diamonds, cut == \"Premium\"), mean_price = mean(price))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  mean_price\n       <dbl>\n1      4584.\n```\n\n\n:::\n:::\n\nこのように、関数の内側に入れ子構造で書いていくため、処理が複雑になると読みにくくなります。\n\n**パイプ `%>%` を使った場合**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 上と全く同じ処理\ndiamonds %>%\n  filter(cut == \"Premium\") %>%\n  summarise(mean_price = mean(price))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  mean_price\n       <dbl>\n1      4584.\n```\n\n\n:::\n:::\n\n\n`diamonds` データセットを、次に `filter` し、次に `summarise` する、という処理の流れが非常に分かりやすくなります。\n\n\n## `tidyverse` のインストールと使い方\n\ntidyverse を使うには、まず一度だけインストール作業が必要です。\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 一度だけ実行すればOK\ninstall.packages(\"tidyverse\")\n```\n:::\n\n\nインストールが終わったら、Rのセッションを開始するたびに、`library()` 関数を使って `tidyverse` の道具箱を使えるように準備します。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Rスクリプトの冒頭で毎回実行する\nlibrary(tidyverse)\n```\n:::\n\n\n## 演習\n\n1. まだインストールしていない場合は、`tidyverse` をインストールしてください。\n2. `library(tidyverse)` を実行して、パッケージを読み込んでください。\n3. Rに組み込まれている `iris` というデータセットがあります。パイプ演算子 `%>%` を使って、以下の処理を一行で繋げて書いてみましょう。\n  - `iris` データセットを使い、\n  - `Species` が \"setosa\" の行だけを `filter()` で絞り込み、\n  - その `Sepal.Length`（がくの長さ）の平均値を `summarise()` で計算する。\n\n（ヒント：`summarise(mean_sepal_length = mean(Sepal.Length))` のように書きます）\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}