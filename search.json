[
  {
    "objectID": "ggplot2/01-about.html",
    "href": "ggplot2/01-about.html",
    "title": "作図について",
    "section": "",
    "text": "R での作図には、大きく分けて2つの主要な方法があります。 R に元から組み込まれている Base R の作図システムと、tidyverse エコシステムの中核である ggplot2 パッケージです。",
    "crumbs": [
      "作図 (ggplot2)",
      "作図について"
    ]
  },
  {
    "objectID": "ggplot2/01-about.html#base-rでの作図",
    "href": "ggplot2/01-about.html#base-rでの作図",
    "title": "作図について",
    "section": "Base Rでの作図",
    "text": "Base Rでの作図\nR が誕生したときから存在する、伝統的な作図システムです。 plot() 関数でキャンバス (canvas, base layer) を用意し、その上に points() で点を追加し、lines() で線を追加します。\nメリット\n\n追加パッケージが不要: R をインストールすればすぐに使えます。\n手軽で高速: シンプルなグラフを素早く描きたい場合に便利です。\n柔軟性が高い: 細かい部分まで自由にカスタマイズできます。\n\nデメリット\n\nコードが複雑になりがち: 見栄えの良い、複雑なグラフを作ろうとすると、コードが長くなりがちです。\n見栄え: デフォルト（初期設定）の見た目は、ggplot2 に比べてやや古風な印象を受けることがあります。\nデータ構造の意識が必要: カテゴリごとに色を分けるといった処理を、自分で考えながらコードを書く必要があります。\n\n\n# carsデータセットを使い、スピードと停止距離の散布図を描く\n\nplot(cars$speed, cars$dist,\n     main = \"車の速度と停止距離 (Base R)\",\n     xlab = \"速度 (mph)\",\n     ylab = \"停止距離 (ft)\",\n     pch = 19,      # 点の形を塗りつぶしの円に\n     col = \"blue\"   # 点の色を青に\n)",
    "crumbs": [
      "作図 (ggplot2)",
      "作図について"
    ]
  },
  {
    "objectID": "ggplot2/01-about.html#ggplot2-での作図",
    "href": "ggplot2/01-about.html#ggplot2-での作図",
    "title": "作図について",
    "section": "ggplot2 での作図",
    "text": "ggplot2 での作図\nggplot2 は、tidyverseの一部として提供されている、非常に強力で人気の高い作図パッケージです。「グラフィックスの文法 (Grammar of Graphics)」という一貫した哲学に基づいており、「グラフとは、データ、座標系、そして点や線といった図形要素（ジオメトリ）の組み合わせである」と考えます。\nLEGO ブロックのように、データ、エステティック (aesthetics) マッピング（変数をx軸、y軸、色、形などに割り当てる）、図形 (geometry) のパーツを + でつなぎ合わせてグラフを構築します。\nメリット\n\n一貫した文法: 一度文法を覚えれば、どんな種類のグラフでも同じ考え方で作成できます。\n美しい仕上がり: デフォルトでも洗練された美しいグラフが描画されます。\nデータ処理に強い: カテゴリごとの色分けや、グラフの分割（ファセット）が非常に簡単かつ直感的に行えます。\nコードの可読性が高い: 複雑なグラフでも、処理のレイヤーが + で繋がっているためコードが読みやすいです。\n\nデメリット\n\nパッケージの読み込みが必要: library(ggplot2) または library(tidyverse) が必要です。\n初期学習コスト aes()やgeom_\\*()といった独自の「文法」を最初に学ぶ必要があります。\n単純なグラフには少し冗長: ごく単純なグラフを1つだけ描きたい場合、Base R よりコードが長くなることもあります。\n\n\nlibrary(ggplot2)\n# 同じ散布図をggplot2で描く\nggplot(data = cars, aes(x = speed, y = dist)) +\n  geom_point(color = \"blue\", size = 3) +\n  labs(\n    title = \"車の速度と停止距離 (ggplot2)\",\n    x = \"速度 (mph)\",\n    y = \"停止距離 (ft)\"\n  ) +\n  theme_minimal()",
    "crumbs": [
      "作図 (ggplot2)",
      "作図について"
    ]
  },
  {
    "objectID": "tidyverse/20-dplyr.html",
    "href": "tidyverse/20-dplyr.html",
    "title": "ミューテート・グループバイ・サマライズ",
    "section": "",
    "text": "この資料では、データ分析のワークフローで最も重要ないくつかの「動詞」を学びます。 dplyr を使って新しい列を作成し、データをグループに分け、各グループの情報を要約する方法をマスターしましょう。\n\nmutate(): 既存の列から新しい列を作成する\ngroup_by(): 分析の単位となるグループを宣言する\nsummarise(): グループごとにデータを要約する\n\nこの 3 つの関数は、データから洞察を得るために頻繁に組み合わせて使われます。\n\nlibrary(tidyverse)",
    "crumbs": [
      "tidyverse",
      "ミューテート・グループバイ・サマライズ"
    ]
  },
  {
    "objectID": "tidyverse/20-dplyr.html#dplyr-データ集計列の作成グループ化要約",
    "href": "tidyverse/20-dplyr.html#dplyr-データ集計列の作成グループ化要約",
    "title": "ミューテート・グループバイ・サマライズ",
    "section": "",
    "text": "この資料では、データ分析のワークフローで最も重要ないくつかの「動詞」を学びます。 dplyr を使って新しい列を作成し、データをグループに分け、各グループの情報を要約する方法をマスターしましょう。\n\nmutate(): 既存の列から新しい列を作成する\ngroup_by(): 分析の単位となるグループを宣言する\nsummarise(): グループごとにデータを要約する\n\nこの 3 つの関数は、データから洞察を得るために頻繁に組み合わせて使われます。\n\nlibrary(tidyverse)",
    "crumbs": [
      "tidyverse",
      "ミューテート・グループバイ・サマライズ"
    ]
  },
  {
    "objectID": "tidyverse/20-dplyr.html#mutate-新しい列を作成する",
    "href": "tidyverse/20-dplyr.html#mutate-新しい列を作成する",
    "title": "ミューテート・グループバイ・サマライズ",
    "section": "mutate(): 新しい列を作成する",
    "text": "mutate(): 新しい列を作成する\nmutate() は、既存の列を使って計算を行い、その結果を新しい列として追加する関数です。 スプレッドシートで新しい数式列を追加する作業に似ています。\n例1: starwars データセットで、身長(m)と体重(kg)からBMIを計算する\n身長 height は cm 単位なので、m 単位に変換 height / 100 してから計算します。\n\nstarwars  |&gt; \n  select(name, height, mass)  |&gt; \n  mutate(\n    height_m = height / 100,\n    bmi = mass / (height_m ^ 2)\n  )\n\n# A tibble: 87 × 5\n   name               height  mass height_m   bmi\n   &lt;chr&gt;               &lt;int&gt; &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;\n 1 Luke Skywalker        172    77     1.72  26.0\n 2 C-3PO                 167    75     1.67  26.9\n 3 R2-D2                  96    32     0.96  34.7\n 4 Darth Vader           202   136     2.02  33.3\n 5 Leia Organa           150    49     1.5   21.8\n 6 Owen Lars             178   120     1.78  37.9\n 7 Beru Whitesun Lars    165    75     1.65  27.5\n 8 R5-D4                  97    32     0.97  34.0\n 9 Biggs Darklighter     183    84     1.83  25.1\n10 Obi-Wan Kenobi        182    77     1.82  23.2\n# ℹ 77 more rows\n\n\nポイント: mutate() の中で作成した新しい列 (height_m) は、すぐに次の計算 (bmi = ...) で使うことができます。",
    "crumbs": [
      "tidyverse",
      "ミューテート・グループバイ・サマライズ"
    ]
  },
  {
    "objectID": "tidyverse/20-dplyr.html#group_by-グループ化を宣言する",
    "href": "tidyverse/20-dplyr.html#group_by-グループ化を宣言する",
    "title": "ミューテート・グループバイ・サマライズ",
    "section": "group_by(): グループ化を宣言する",
    "text": "group_by(): グループ化を宣言する\ngroup_by() は、データそのものを変更するのではなく、データに「これは〇〇ごとにグループ化されています」という印をつける関数です。 この後に続く summarise() などの処理が、データ全体に対してではなく、各グループに対して個別に行われるようになります。\n例: starwars データセットを species (種族) ごとにグループ化する\n\nstarwars |&gt; group_by(species)\n\n# A tibble: 87 × 14\n# Groups:   species [38]\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   &lt;chr&gt;     &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n 1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu…\n 2 C-3PO       167    75 &lt;NA&gt;       gold       yellow         112   none  mascu…\n 3 R2-D2        96    32 &lt;NA&gt;       white, bl… red             33   none  mascu…\n 4 Darth V…    202   136 none       white      yellow          41.9 male  mascu…\n 5 Leia Or…    150    49 brown      light      brown           19   fema… femin…\n 6 Owen La…    178   120 brown, gr… light      blue            52   male  mascu…\n 7 Beru Wh…    165    75 brown      light      blue            47   fema… femin…\n 8 R5-D4        97    32 &lt;NA&gt;       white, red red             NA   none  mascu…\n 9 Biggs D…    183    84 black      light      brown           24   male  mascu…\n10 Obi-Wan…    182    77 auburn, w… fair       blue-gray       57   male  mascu…\n# ℹ 77 more rows\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\nこのコードを実行しても、データの見た目はほとんど変わりません。 しかし、出力の先頭に Groups: species と表示され、Rが内部でデータをグループとして認識していることがわかります。",
    "crumbs": [
      "tidyverse",
      "ミューテート・グループバイ・サマライズ"
    ]
  },
  {
    "objectID": "tidyverse/20-dplyr.html#summarise-グループごとに要約する",
    "href": "tidyverse/20-dplyr.html#summarise-グループごとに要約する",
    "title": "ミューテート・グループバイ・サマライズ",
    "section": "summarise(): グループごとに要約する",
    "text": "summarise(): グループごとに要約する\nsummarise() (または summarize) は、データ（またはグループ化されたデータ）を1行の要約統計量にまとめる（集計する）関数です。 group_by() と組み合わせることで、その真価を発揮します。\nよく使われる要約関数：\n\nn(): グループの行数（データ数）を数える\nmean(): 平均値\nsd(): 標準偏差\nmin(), max(): 最小値、最大値\nsum(): 合計値\n\n重要: mean() などの計算で、データに NA (欠損値) が含まれていると結果が NA になってしまいます。 これを避けるために、引数に na.rm = TRUE (NAをリムーブ(無視)する) を指定するのが一般的です。\n例: 各 species (種族) ごとに、キャラクターの数、平均身長、平均体重を計算する\n\nstarwars |&gt; \n  group_by(species) |&gt; \n  summarise(\n    count = n(),\n    avg_height = mean(height, na.rm = TRUE),\n    avg_mass = mean(mass, na.rm = TRUE)\n  )\n\n# A tibble: 38 × 4\n   species   count avg_height avg_mass\n   &lt;chr&gt;     &lt;int&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n 1 Aleena        1        79      15  \n 2 Besalisk      1       198     102  \n 3 Cerean        1       198      82  \n 4 Chagrian      1       196     NaN  \n 5 Clawdite      1       168      55  \n 6 Droid         6       131.     69.8\n 7 Dug           1       112      40  \n 8 Ewok          1        88      20  \n 9 Geonosian     1       183      80  \n10 Gungan        3       209.     74  \n# ℹ 28 more rows\n\n\nこの処理により、元のデータが種族ごとの1行のサマリーに変換されました。 group_by() で指定した列 (species) と、summarise() で作成した新しい要約列だけが結果として残ります。",
    "crumbs": [
      "tidyverse",
      "ミューテート・グループバイ・サマライズ"
    ]
  },
  {
    "objectID": "tidyverse/20-dplyr.html#演習すべてを繋げてみよう",
    "href": "tidyverse/20-dplyr.html#演習すべてを繋げてみよう",
    "title": "ミューテート・グループバイ・サマライズ",
    "section": "演習：すべてを繋げてみよう",
    "text": "演習：すべてを繋げてみよう\n問題: キャラクターが2人以上登場する homeworld (出身惑星) について、惑星ごとの登場人数と、キャラクターの平均身長を計算してください。最後に、登場人数が多い順に結果を並べ替えてください。\nヒント:\n\nhomeworld で group_by() する\n登場人数 (count = n()) と平均身長 (avg_height = mean(...)) を summarise() で計算する\nfilter() で count が2以上の行だけを絞り込む\narrange(desc(count)) で並べ替える",
    "crumbs": [
      "tidyverse",
      "ミューテート・グループバイ・サマライズ"
    ]
  },
  {
    "objectID": "tidyverse/01-about.html",
    "href": "tidyverse/01-about.html",
    "title": "tidyverseについて",
    "section": "",
    "text": "これまでは、Rに元々備わっている基本的な機能（Base Rと呼ばれます）を学んできました。 しかし、実際のデータ分析では、より効率的で直感的なツールが求められます。\nそこで登場するのが tidyverse です。 tidyverse は単一のパッケージではなく、データサイエンスのために設計されたRパッケージの集合体です。 データ分析の一連の作業（読み込み、整形、可視化など）を、一貫した哲学のもとでスムーズに行えるように作られています。\ntidyverse は、データ分析のための洗練された「道具箱」や「作業場」だと考えてください。 個々のツールが強力なだけでなく、互いに連携しやすいように設計されています。",
    "crumbs": [
      "tidyverse",
      "tidyverseについて"
    ]
  },
  {
    "objectID": "tidyverse/01-about.html#tidyverse-の哲学タイディデータ",
    "href": "tidyverse/01-about.html#tidyverse-の哲学タイディデータ",
    "title": "tidyverseについて",
    "section": "tidyverse の哲学：「タイディデータ」",
    "text": "tidyverse の哲学：「タイディデータ」\ntidyverse の中心には、タイディデータ (Tidy Data) という考え方があります。 これは、データを整理するためのシンプルなルールです。\n\n各変数は、それ自身の列を持つ。\n各観測は、それ自身の行を持つ。\n各タイプの観測ユニットは、それ自身のテーブルを持つ。\n\nこの一貫したデータ形式に整えることで、tidyverse の各ツールをスムーズに連携させることができるのです。",
    "crumbs": [
      "tidyverse",
      "tidyverseについて"
    ]
  },
  {
    "objectID": "tidyverse/01-about.html#tidyverse-の主要なパッケージたち",
    "href": "tidyverse/01-about.html#tidyverse-の主要なパッケージたち",
    "title": "tidyverseについて",
    "section": "tidyverse の主要なパッケージたち",
    "text": "tidyverse の主要なパッケージたち\ntidyverse をインストールすると、データ分析で頻繁に使われる多くの便利パッケージが一度に利用可能になります。 ここでは特に重要なものをいくつか紹介します。\n\ndplyr : データ操作の「動詞」集です。filter()（行の絞り込み）、select()（列の選択）、mutate()（新しい列の作成）、arrange()（並べ替え）、summarise()（要約）といった直感的な関数で、データを自在に操れます。\nggplot2: Rで最も有名で強力なデータ可視化パッケージです。「グラフィックスの文法」という考え方に基づいており、単純なグラフから非常に複雑で美しいグラフまで、柔軟に作成できます。\nreadr: CSVファイルなどの表形式データを高速かつ正確に読み込むためのパッケージです。Base Rの関数よりも使いやすく、安定しています。\ntidyr: データを「タイディな」形式に整形するためのパッケージです。列と行の形式を変換する pivot_longer() や pivot_wider() などの関数を提供します。\nstringr: 文字列（テキストデータ）の操作を簡単にするためのパッケージです。",
    "crumbs": [
      "tidyverse",
      "tidyverseについて"
    ]
  },
  {
    "objectID": "tidyverse/01-about.html#魔法のパイプ演算子-または",
    "href": "tidyverse/01-about.html#魔法のパイプ演算子-または",
    "title": "tidyverseについて",
    "section": "魔法のパイプ演算子 %>% または |>",
    "text": "魔法のパイプ演算子 %&gt;% または |&gt;\ntidyverse のコードを特徴づけるのが、パイプ演算子 %&gt;% です。 これは、左側の処理結果を、右側の関数の最初の引数として渡す役割をします。\nR のネイティブのパイプは |&gt; ですが、どちらでも似たような使い方です。\nこれにより、複数の処理を上から下、左から右へと、まるで文章を読むように繋げて書くことができます。\n%&gt;% はショートカットキー ctrl-shift-mctrl-shift-m (Windows/Linux) または cmd-shift-mcmd-shift-m (Mac) で簡単に入力できます。\nパイプを使わない場合\n\n# diamondsデータセットから、カットが \"Premium\" のものを抜き出し、\n# その価格の平均を計算する\nsummarise(filter(diamonds, cut == \"Premium\"), mean_price = mean(price))\n\n# A tibble: 1 × 1\n  mean_price\n       &lt;dbl&gt;\n1      4584.\n\n\nこのように、関数の内側に入れ子構造で書いていくため、処理が複雑になると読みにくくなります。\nパイプ %&gt;% を使った場合\n\n# 上と全く同じ処理\ndiamonds %&gt;%\n  filter(cut == \"Premium\") %&gt;%\n  summarise(mean_price = mean(price))\n\n# A tibble: 1 × 1\n  mean_price\n       &lt;dbl&gt;\n1      4584.\n\n\ndiamonds データセットを、次に filter し、次に summarise する、という処理の流れが非常に分かりやすくなります。",
    "crumbs": [
      "tidyverse",
      "tidyverseについて"
    ]
  },
  {
    "objectID": "tidyverse/01-about.html#tidyverse-のインストールと使い方",
    "href": "tidyverse/01-about.html#tidyverse-のインストールと使い方",
    "title": "tidyverseについて",
    "section": "tidyverse のインストールと使い方",
    "text": "tidyverse のインストールと使い方\ntidyverse を使うには、まず一度だけインストール作業が必要です。\n\n# 一度だけ実行すればOK\ninstall.packages(\"tidyverse\")\n\nインストールが終わったら、Rのセッションを開始するたびに、library() 関数を使って tidyverse の道具箱を使えるように準備します。\n\n# Rスクリプトの冒頭で毎回実行する\nlibrary(tidyverse)",
    "crumbs": [
      "tidyverse",
      "tidyverseについて"
    ]
  },
  {
    "objectID": "tidyverse/01-about.html#演習",
    "href": "tidyverse/01-about.html#演習",
    "title": "tidyverseについて",
    "section": "演習",
    "text": "演習\n\nまだインストールしていない場合は、tidyverse をインストールしてください。\nlibrary(tidyverse) を実行して、パッケージを読み込んでください。\nRに組み込まれている iris というデータセットがあります。パイプ演算子 %&gt;% を使って、以下の処理を一行で繋げて書いてみましょう。\n\n\niris データセットを使い、\nSpecies が “setosa” の行だけを filter() で絞り込み、\nその Sepal.Length（がくの長さ）の平均値を summarise() で計算する。\n\n（ヒント：summarise(mean_sepal_length = mean(Sepal.Length)) のように書きます）",
    "crumbs": [
      "tidyverse",
      "tidyverseについて"
    ]
  },
  {
    "objectID": "kiso/04-vector.html",
    "href": "kiso/04-vector.html",
    "title": "ベクトル・行列などの作り方",
    "section": "",
    "text": "これまでは、一つの値を一つのオブジェクトに格納する方法を学びました。しかし、実際のデータ分析では、複数の値をまとめて扱いたい場面がほとんどです。ここでは、そのための基本的な3つのデータ構造、ベクトル、リスト、行列を学びましょう。",
    "crumbs": [
      "基礎",
      "ベクトル・行列などの作り方"
    ]
  },
  {
    "objectID": "kiso/04-vector.html#ベクトル-vector",
    "href": "kiso/04-vector.html#ベクトル-vector",
    "title": "ベクトル・行列などの作り方",
    "section": "ベクトル (Vector)",
    "text": "ベクトル (Vector)\nベクトルは、Rにおける最も基本的なデータ構造です。 同じ種類のデータ（例：すべて数値、すべて文字）を一直線に並べたものです。\nベクトルを作成するには、c() という関数を使います。 c は “combine” (組み合わせる) の略です。\n\n# 数値のベクトルを作成\nnumeric_vector &lt;- c(10, 20, 30, 40, 50)\nnumeric_vector\n\n[1] 10 20 30 40 50\n\n# 文字列のベクトルを作成 (文字列は \"\" または '' で囲む)\ncharacter_vector &lt;- c(\"apple\", \"banana\", \"cherry\")\ncharacter_vector\n\n[1] \"apple\"  \"banana\" \"cherry\"\n\n# 論理値 (TRUE/FALSE) のベクトルを作成\nlogical_vector &lt;- c(TRUE, FALSE, TRUE, TRUE)\nlogical_vector\n\n[1]  TRUE FALSE  TRUE  TRUE\n\n\nベクトルの特徴：\n同じデータ型の要素しか含めることができません。 もし異なる型のデータを混ぜると、Rが自動的に型を変換します（例：数値と文字を混ぜると、すべて文字に変換されます）。\n\nベクトルに対する操作\nベクトル全体に対して一度に計算を行うことができます。 これをベクトル化演算と呼び、Rの強力な特徴の一つです。\n\n# numeric_vector の各要素を2倍する\nnumeric_vector * 2\n\n[1]  20  40  60  80 100\n\n# numeric_vector の各要素に5を足す\nnumeric_vector + 5\n\n[1] 15 25 35 45 55",
    "crumbs": [
      "基礎",
      "ベクトル・行列などの作り方"
    ]
  },
  {
    "objectID": "kiso/04-vector.html#リスト-list",
    "href": "kiso/04-vector.html#リスト-list",
    "title": "ベクトル・行列などの作り方",
    "section": "リスト (List) ️",
    "text": "リスト (List) ️\nリストは、ベクトルとは異なり、異なる種類のデータを一つのオブジェクトに格納できる、より柔軟なデータ構造です。 まるで、色々な種類の品物を入れられるショッピングカートのようです。\nリストを作成するには、list() 関数を使います。\n\n# 数値、文字列、ベクトルを混在させたリストを作成\nmy_list &lt;- list(\n  name = \"Taro\",      # 文字列\n  age = 30,           # 数値\n  scores = c(85, 92, 78), # ベクトル\n  is_student = TRUE   # 論理値\n)\n\nmy_list\n\n$name\n[1] \"Taro\"\n\n$age\n[1] 30\n\n$scores\n[1] 85 92 78\n\n$is_student\n[1] TRUE\n\n\nリストの特徴：\n数値、文字列、ベクトル、さらには他のリストなど、何でも格納できます。\n= を使って各要素に名前をつけることができます（例：name = \"Taro\"）。",
    "crumbs": [
      "基礎",
      "ベクトル・行列などの作り方"
    ]
  },
  {
    "objectID": "kiso/04-vector.html#リストの要素へのアクセス",
    "href": "kiso/04-vector.html#リストの要素へのアクセス",
    "title": "ベクトル・行列などの作り方",
    "section": "リストの要素へのアクセス",
    "text": "リストの要素へのアクセス\nリストの特定の要素を取り出すには、$ または [[ ]] を使います。\n\n# `$` を使って \"name\" 要素にアクセス\nmy_list$name\n\n[1] \"Taro\"\n\n# `[[ ]]` を使って \"scores\" 要素にアクセス\nmy_list[[\"scores\"]]\n\n[1] 85 92 78",
    "crumbs": [
      "基礎",
      "ベクトル・行列などの作り方"
    ]
  },
  {
    "objectID": "kiso/04-vector.html#行列-matrix",
    "href": "kiso/04-vector.html#行列-matrix",
    "title": "ベクトル・行列などの作り方",
    "section": "行列 (Matrix)",
    "text": "行列 (Matrix)\n行列（マトリックス）は、ベクトルを2次元（行と列）に拡張したものです。スプレッドシートの表のように、データを行と列の形式で扱います。\n行列を作成するには、matrix() 関数を使います。\n\n# 1から6までの数値を使って、2行3列の行列を作成\nmy_matrix &lt;- matrix(c(1, 2, 3, 4, 5, 6), nrow = 2, ncol = 3)\nmy_matrix\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n\n行列の特徴：\nベクトルと同様に、すべての要素が同じデータ型でなければなりません。\nnrow で行数を、ncol で列数を指定します。",
    "crumbs": [
      "基礎",
      "ベクトル・行列などの作り方"
    ]
  },
  {
    "objectID": "kiso/04-vector.html#行列の要素へのアクセス",
    "href": "kiso/04-vector.html#行列の要素へのアクセス",
    "title": "ベクトル・行列などの作り方",
    "section": "行列の要素へのアクセス",
    "text": "行列の要素へのアクセス\n行列の要素には、[行番号, 列番号] という形式でアクセスします。\n\n# 2行目の3列目の要素にアクセス\nmy_matrix[2, 3]\n\n[1] 6\n\n# 1行目のすべての要素にアクセス (列番号を空にする)\nmy_matrix[1, ]\n\n[1] 1 3 5\n\n# 2列目のすべての要素にアクセス (行番号を空にする)\nmy_matrix[, 2]\n\n[1] 3 4",
    "crumbs": [
      "基礎",
      "ベクトル・行列などの作り方"
    ]
  },
  {
    "objectID": "kiso/04-vector.html#配列-array",
    "href": "kiso/04-vector.html#配列-array",
    "title": "ベクトル・行列などの作り方",
    "section": "配列 (Array)",
    "text": "配列 (Array)\n配列は、同じ種類のデータを3次元以上の構造で格納するためのオブジェクトです。行列がスプレッドシート1枚だとすれば、配列はそのスプレッドシートを何枚も重ねた「束」や「キューブ」のようなものだとイメージしてください。\n配列を作成するには、array() 関数を使います。\narray(データ, dim = c(行数, 列数, 次元数, ...))\ndim (dimensionsの略) 引数に、各次元の大きさをベクトルで指定するのがポイントです。\n2つの「3行2列」の行列を重ねた、3次元の配列を作成してみましょう。\n\n# 1から12までの数値データを用意\ndata_vector &lt;- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\n\n# 3行 x 2列 x 2面 の配列を作成\nmy_array &lt;- array(data_vector, dim = c(3, 2, 2))\n\nmy_array\n\n, , 1\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\n, , 2\n\n     [,1] [,2]\n[1,]    7   10\n[2,]    8   11\n[3,]    9   12\n\n\n実行すると、コンソールには2つの3x2行列が表示されます。これが dim = c(3, 2, 2) の意味するところです。\n配列の特徴：\n行列と同様に、すべての要素が同じデータ型でなければなりません。\ndim を指定することで、2次元、3次元、4次元…と自由に次元を定義できます。",
    "crumbs": [
      "基礎",
      "ベクトル・行列などの作り方"
    ]
  },
  {
    "objectID": "kiso/04-vector.html#配列の要素へのアクセス",
    "href": "kiso/04-vector.html#配列の要素へのアクセス",
    "title": "ベクトル・行列などの作り方",
    "section": "配列の要素へのアクセス",
    "text": "配列の要素へのアクセス\n配列の要素へのアクセスは、行列の [行, 列] という指定をさらに拡張した形で行います。3次元配列の場合は [行番号, 列番号, 面番号] のようになります。\n\n# 1番目の面の、3行目の2列目の要素にアクセス\nmy_array[3, 2, 1]\n\n[1] 6\n\n# 2番目の面の、すべての要素（つまり2番目の行列全体）にアクセス\nmy_array[, , 2]\n\n     [,1] [,2]\n[1,]    7   10\n[2,]    8   11\n[3,]    9   12\n\n# すべての面の、1行目のすべての列にアクセス\nmy_array[1, , ]\n\n     [,1] [,2]\n[1,]    1    7\n[2,]    4   10",
    "crumbs": [
      "基礎",
      "ベクトル・行列などの作り方"
    ]
  },
  {
    "objectID": "kiso/04-vector.html#まとめ",
    "href": "kiso/04-vector.html#まとめ",
    "title": "ベクトル・行列などの作り方",
    "section": "まとめ",
    "text": "まとめ\n\nベクトル：同じ型のデータを1次元に並べたもの c()\nリスト：異なる型のデータを格納できるもの list()\n行列：同じ型のデータを2次元（行と列）に並べたもの matrix()\n配列: 同じ型のデータを N 次元に並べたもの array()",
    "crumbs": [
      "基礎",
      "ベクトル・行列などの作り方"
    ]
  },
  {
    "objectID": "kiso/04-vector.html#演習",
    "href": "kiso/04-vector.html#演習",
    "title": "ベクトル・行列などの作り方",
    "section": "演習",
    "text": "演習\n\nあなたの好きな3つの果物の名前を要素に持つ、favorite_fruits という名前のベクトルを作成してください。\nname（あなたの名前）、height（あなたの身長(cm)）、favorite_number（好きな数字）という3つの要素を持つ my_profile という名前のリストを作成してください。\n1から9までの連続した整数を使って、3行3列の行列 nine_matrix を作成してください。\n1から27までの連続した整数を使って、3行3列の行列が3つ重なった構造の3次元配列 cube_array を作成してください。\n作成した cube_array の3番目の行列（面）だけを取り出して表示してください。\ncube_array の1番目の行列（面）の、2行目、2列目にある要素は何ですか？コードを書いて確認してみましょう。",
    "crumbs": [
      "基礎",
      "ベクトル・行列などの作り方"
    ]
  },
  {
    "objectID": "kiso/02-fundamentals.html",
    "href": "kiso/02-fundamentals.html",
    "title": "基本的な操作",
    "section": "",
    "text": "R スクリプトは、Rに実行させたい命令を記述したテキストファイルです。 コードが複雑になるほど、そのコードが何をしているのかを後から見返したときや、他の人と共有するときに分かりにくくなります。\nそこで重要になるのがコメントです。 コメントは、コード内にメモ書きを残すための機能で、Rはコメント部分をコードとして実行しません。\nRでは、#（ハッシュマーク）から行末までがコメントとして扱われます。\n\n# これはコメントです。この行はRによって無視されます。\n\n1 + 1 # このように、コードの後にコメントを書くこともできます。\n\n[1] 2\n\n\nコメントを書く良い習慣：\n\nなぜそのコードを書いたのかを説明する。\n複雑な処理の目的を記述する。\n将来の自分や他の人のために、コードの意図を明確にする。",
    "crumbs": [
      "基礎",
      "基本的な操作"
    ]
  },
  {
    "objectID": "kiso/02-fundamentals.html#r-スクリプトとコメント",
    "href": "kiso/02-fundamentals.html#r-スクリプトとコメント",
    "title": "基本的な操作",
    "section": "",
    "text": "R スクリプトは、Rに実行させたい命令を記述したテキストファイルです。 コードが複雑になるほど、そのコードが何をしているのかを後から見返したときや、他の人と共有するときに分かりにくくなります。\nそこで重要になるのがコメントです。 コメントは、コード内にメモ書きを残すための機能で、Rはコメント部分をコードとして実行しません。\nRでは、#（ハッシュマーク）から行末までがコメントとして扱われます。\n\n# これはコメントです。この行はRによって無視されます。\n\n1 + 1 # このように、コードの後にコメントを書くこともできます。\n\n[1] 2\n\n\nコメントを書く良い習慣：\n\nなぜそのコードを書いたのかを説明する。\n複雑な処理の目的を記述する。\n将来の自分や他の人のために、コードの意図を明確にする。",
    "crumbs": [
      "基礎",
      "基本的な操作"
    ]
  },
  {
    "objectID": "kiso/02-fundamentals.html#r-を使った算術演算",
    "href": "kiso/02-fundamentals.html#r-を使った算術演算",
    "title": "基本的な操作",
    "section": "R を使った算術演算",
    "text": "R を使った算術演算\nR は高性能な電卓としても利用できます。 基本的な算術演算は、見慣れた記号を使って簡単に行うことができます。\n\n実際に計算してみましょう\nRStudioのスクリプトファイル（左上のウィンドウ）に以下のコードを書き、一行ずつ実行してみましょう。コードを実行するには、カーソルをその行に置き、ctrl-enterctrl-enter（Windows/Linux）または cmd-entercmd-enter（Mac）を押します。\n\n# 足し算\n5 + 3\n\n[1] 8\n\n# 引き算\n5 - 3\n\n[1] 2\n\n# 掛け算\n5 * 3\n\n[1] 15\n\n# 割り算\n5 /3 \n\n[1] 1.666667\n\n# べき乗\n5^3\n\n[1] 125\n\n\n実行結果は、コンソール（通常は左下のウィンドウ）に表示されます。\n\n\n演算の優先順位\nR では、数学のルールと同様に、演算子に優先順位があります。\n\n()（括弧）の中が最優先\n^（べき乗）\n*（掛け算）\n/（割り算）\n+（足し算）\n-（引き算）\n\n\n# 括弧がない場合、掛け算が先に計算される (5 * 2 = 10, 3 + 10 = 13)\n3 + 5 * 2\n\n[1] 13\n\n# 括弧がある場合、括弧内が先に計算される (3 + 5 = 8, 8 * 2 = 16)\n(3 + 5) * 2\n\n[1] 16\n\n\n\n\n演習\n\n自分の年齢を 2 で割って、5 を足した結果を計算するRコードを書いてみましょう。 そのコードの上には、「年齢計算」というコメントを追加してください。\n100 から 25 を引き、その結果を 5 で割る計算を、括弧を使って一行のコードで書いてみましょう。",
    "crumbs": [
      "基礎",
      "基本的な操作"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "水産海洋データ解析演習の R コードについて",
    "section": "",
    "text": "このサイトは 水産海洋データ解析演習 のために準備しました。\nサイトの更新日は 09/22/2025 10:45:23 JST です。\nはここ https://cran.r-project.org/ からダウンロードできます。 Windows ユーザは Rtools もインストールすることをお勧めします。\nRStudio もインストールしましょう。 R のデフォルトの IDE はとても使いにくいです。\nSession Information",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#quick-reference",
    "href": "index.html#quick-reference",
    "title": "水産海洋データ解析演習の R コードについて",
    "section": "Quick Reference",
    "text": "Quick Reference\nヘルプ\n\n?mean                          # mean() 関数のヘルプをみる\nhelp.search(\"mean\")            # 文字列で検索\nhelp(package = \"tidyverse\")    # パッケージのヘルプをみる\n\nライブラリー (library)\n\ninstall.packages(\"tidyverse\")   # CRANサーバからパッケージをインストールする\n\n一回インストールすればいいので、install.packages() は毎回する必要はない。\n\nlibrary(tidyverse)              # パッケージをライブラリーから読み込む\nnlstools::preview()             # パッケージ内の関数を直接使う\n\nプログラミング文の基礎\nfor loop\nfor (変数名 in シークエンス) {\n  繰り返し実行するコード\n}\n\nfor(i in 1:10) {\n  j = j + i\n  print(j)\n}\n\nwhile loop\nwhile(条件) {\n  繰り返し実行するコード\n}\n\ni = 0\nwhile(i &lt;= 10) {\n  i = i + 1\n  print(i)\n}\n\nif else\nif(条件) {\n  コード\n} else {\n　条件を満たさないときのコード\n}\n\nx1 = sample(1:6, 1) \nx2 = sample(1:6, 1)\nif(near(x1 + x2, 7)) {\n  print(paste(x1, x2))\n} else {\n  print(x1 + x2)}\n\n条件判定\n\nx == y : x と y は等しい\nx != y : x と y は等しくない\nx &gt; y : x が y より大きい\nx &lt; y : x が y より小さい\nx &gt;= y : x が y 以上\nx &lt;= y : x が y 以下\nis.na(x) : x が欠損値である\nis.null(x) : x が null 値である\nany(x %in% y) : x が y に含まれる\n\nfunction\n関数名 = function(変数1, 変数2, ...) {\n  コード\n}\n\nse = function(x, na.rm = FALSE) {\n  s = sd(x, na.rm = na.rm)\n  n = length(na.omit(x))\n  s / sqrt(n - 1)\n}\n\nファイルの入出力\n研究室では、ファイルの入出力に tidyverse　パッケージの関数を使っています。\n\nlibrary(tidyerse)\n\n\n# ファイルの読み込み\ndset = read_table(\"filename.txt\") # タブ・コンマ区切りのテキストファイル\ndset = read_csv(\"filename.csv\")   # コンマ区切りの csv ファイル\ndset = read_rds(\"filename.rds\")   # R オブジェクトファイル\n\n\n# ファイルの書き込み。文字のエンコーディングは UTF-8 です。\nwrite_tsv(dset, \"filename.txt\")         # タブ区切りの txt ファイル\nwrite_csv(dset, \"filename.csv\")         # コンマ区切りの csv ファイル\nwrite_excel_csv(dset, \"filename.csv\")   # Excel用 コンマ区切りの csv ファイル\nwrite_rds(dset, \"filename.rds\")         # R オブジェクトファイル\n\n資料は自由に使ってください (MIT License)。 サイトは Quarto で作成しました。",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "このサイトについて",
    "section": "",
    "text": "水産海洋データ解析演習I・II のコードを紹介するためのサイトです。",
    "crumbs": [
      "サイトについて"
    ]
  },
  {
    "objectID": "about.html#水産海洋データ解析演習iiiとは",
    "href": "about.html#水産海洋データ解析演習iiiとは",
    "title": "このサイトについて",
    "section": "水産海洋データ解析演習I・IIとは",
    "text": "水産海洋データ解析演習I・IIとは\nデータ処理ソフトウエア R を用いて，本ソフトの原理, 操作技術習得し, 統計解析・データ解析技術を学びます。 本演習では データ処理・ 作図作業を中心に学習し ます。 フィールドで得られたデータを用い，具体的な事象をあげながら講義を進めます。 また各自のデータの解析相談にも応じます。\nデータ処理ソフトウエア R を用いて, 本ソフトの原理, 操作技術習得し, 統計解析・デ ータ解析技術を学びます。 演習では 一般化線形モデル解析，非線形モデル解析、ビッグデータ解析の基礎を中心に学習し ます。 フィールドで得られたデータを用い，具体的な事象をあげながら講義を進めます。 た各自のデータの解析相談にも応じます。",
    "crumbs": [
      "サイトについて"
    ]
  },
  {
    "objectID": "kiso/01-assignment.html",
    "href": "kiso/01-assignment.html",
    "title": "代入演算子",
    "section": "",
    "text": "代入は = か &lt;- alt--alt-- です。伝統的に使われる代入は &lt;- ですが、私は = を使っています。\n左辺は変数名、右辺は値です。\n\n\na = 4.2\nb &lt;- 5.0\n\na に入れた値を見るには次のようにコードを実行しましょう。\n\na\n\n[1] 4.2\n\n\nb の内容も同じようにみれます。\n\nb\n\n[1] 5",
    "crumbs": [
      "基礎",
      "代入演算子"
    ]
  },
  {
    "objectID": "kiso/01-assignment.html#代入演算子-assignment-operator-とベクトル-vector-とは",
    "href": "kiso/01-assignment.html#代入演算子-assignment-operator-とベクトル-vector-とは",
    "title": "代入演算子",
    "section": "",
    "text": "代入は = か &lt;- alt--alt-- です。伝統的に使われる代入は &lt;- ですが、私は = を使っています。\n左辺は変数名、右辺は値です。\n\n\na = 4.2\nb &lt;- 5.0\n\na に入れた値を見るには次のようにコードを実行しましょう。\n\na\n\n[1] 4.2\n\n\nb の内容も同じようにみれます。\n\nb\n\n[1] 5",
    "crumbs": [
      "基礎",
      "代入演算子"
    ]
  },
  {
    "objectID": "kiso/03-objects.html",
    "href": "kiso/03-objects.html",
    "title": "オブジェクトへの代入",
    "section": "",
    "text": "前回のレッスンでは、Rを電卓のように使って計算を行いました。 しかし、計算結果をその場で確認するだけでは、その結果を次の計算で使うことができず不便です。\nそこで登場するのがオブジェクトです。 オブジェクトとは、数値や計算結果、さらにはデータセット全体に名前をつけて保存しておくための「箱」のようなものです。 このプロセスを代入と呼びます。",
    "crumbs": [
      "基礎",
      "オブジェクトへの代入"
    ]
  },
  {
    "objectID": "kiso/03-objects.html#オブジェクトへの代入",
    "href": "kiso/03-objects.html#オブジェクトへの代入",
    "title": "オブジェクトへの代入",
    "section": "オブジェクトへの代入",
    "text": "オブジェクトへの代入\nRでは、&lt;- という矢印のような記号（代入演算子と呼ばれます）を使って、オブジェクトに値を代入します。\n基本の形：\nオブジェクト名 &lt;- 値\n\n# `x` という名前のオブジェクトに `10` を代入する\nx &lt;- 10\n\n# `y` という名前のオブジェクトに `5 + 3` の計算結果を代入する\ny &lt;- 5 + 3\n\n&lt;- は、&lt; と - を組み合わせて入力します。 RStudioでは、ショートカットキー Alt + - (Windows/Linux) または Option + - (Mac) で簡単に入力できます。\n代入を実行しても、コンソールには何も表示されません。 しかし、RStudioの右上にある Environment タブに、作成されたオブジェクト x と y が表示されているはずです。 これは、オブジェクトが R の記憶領域に正しく保存されたことを意味します。",
    "crumbs": [
      "基礎",
      "オブジェクトへの代入"
    ]
  },
  {
    "objectID": "kiso/03-objects.html#オブジェクトの利用",
    "href": "kiso/03-objects.html#オブジェクトの利用",
    "title": "オブジェクトへの代入",
    "section": "オブジェクトの利用",
    "text": "オブジェクトの利用\n一度オブジェクトに値を代入すれば、そのオブジェクト名を計算式の中で使うことができます。 Rはオブジェクト名をその中身の値として解釈してくれます。\n\n# 上で作成した `x` と `y` を使って計算する\nx + y\n\n[1] 18\n\nx * y\n\n[1] 80\n\n# 計算結果を新しいオブジェクト `z` に代入する\nz &lt;- x + y\n\nオブジェクトの中身を確認したいときは、オブジェクト名だけをスクリプトに書いて実行します。\n\n# オブジェクト `z` の中身を表示する\nz\n\n[1] 18\n\n\nコンソールに z の中身である 18 が表示されます。",
    "crumbs": [
      "基礎",
      "オブジェクトへの代入"
    ]
  },
  {
    "objectID": "kiso/03-objects.html#オブジェクト名のルール",
    "href": "kiso/03-objects.html#オブジェクト名のルール",
    "title": "オブジェクトへの代入",
    "section": "オブジェクト名のルール",
    "text": "オブジェクト名のルール\nオブジェクト名には、好きな名前をつけることができますが、いくつかのルールと推奨される慣習があります。\nルール（必須）：\n\nアルファベット、数字、.（ドット）、_（アンダースコア）が使えます。\nただし、名前の先頭を数字や . の直後に数字が来る形にすることはできません。（例：2x や .2x はNG）\nT, F, c, q など、Rであらかじめ特別な意味を持つ単語（予約語）は避けるべきです。\n\n慣習（推奨）：\n\n名前は小文字で始める。\n複数の単語をつなげる場合は、_ で区切る（スネークケース）。例：my_data\nオブジェクトの中身がわかるような、意味のある名前をつける。例：x よりも test_score の方が分かりやすい。",
    "crumbs": [
      "基礎",
      "オブジェクトへの代入"
    ]
  },
  {
    "objectID": "kiso/03-objects.html#演習",
    "href": "kiso/03-objects.html#演習",
    "title": "オブジェクトへの代入",
    "section": "演習",
    "text": "演習\n\nwidth という名前のオブジェクトに 20 を、height という名前のオブジェクトに 10 を代入してください。\nwidth と height を使って長方形の面積を計算し、その結果を area という名前の新しいオブジェクトに代入してください。\n最後に、area オブジェクトの中身をコンソールに表示させてください。",
    "crumbs": [
      "基礎",
      "オブジェクトへの代入"
    ]
  },
  {
    "objectID": "kiso/05-functions.html",
    "href": "kiso/05-functions.html",
    "title": "R関数の使い方と作り方",
    "section": "",
    "text": "これまでは、c() や matrix() といったRにあらかじめ用意されている組み込み関数を使ってきました。 関数とは、特定の処理をひとまとめにした「道具」のようなものです。\nRの素晴らしい点は、この「道具」を自分で作れることです。 同じような処理を何度も書く代わりに、一度だけ関数として定義しておけば、あとはその関数名を呼び出すだけで何度でも同じ処理を実行できます。 これにより、コードが整理され、間違いが減り、効率が劇的に向上します。",
    "crumbs": [
      "基礎",
      "R関数の使い方と作り方"
    ]
  },
  {
    "objectID": "kiso/05-functions.html#関数とは",
    "href": "kiso/05-functions.html#関数とは",
    "title": "R関数の使い方と作り方",
    "section": "関数とは？",
    "text": "関数とは？\n関数は、一連の命令をまとめた再利用可能なコードブロックです。\n\n入力（引数 - “ひきすう” と読みます） を受け取り、\n決められた処理を実行し、\n出力（返り値 - “かえりち”） を返します。\n\n自動販売機をイメージしてみてください。 「お金」と「ボタン」という入力に対して、「ジュースを出す」という処理を行い、「ジュース」という出力を返します。 これが関数の基本的な考え方です。",
    "crumbs": [
      "基礎",
      "R関数の使い方と作り方"
    ]
  },
  {
    "objectID": "kiso/05-functions.html#関数の使い方",
    "href": "kiso/05-functions.html#関数の使い方",
    "title": "R関数の使い方と作り方",
    "section": "関数の使い方",
    "text": "関数の使い方\nRで関数を自作するには、function() というキーワードを使います。\n基本の形：\n関数名 &lt;- function(引数1, 引数2, ...) {\n  # ここに実行したい処理を書く\n  \n  return(最終的な結果) # return()で出力する値を指定\n}\n各部分の解説：\n\n関数名: あなたが作る関数につける名前です。オブジェクト名と同じルールで命名します。\nfunction(引数, ...): 関数を定義する宣言です。() の中に、この関数が受け取る入力（引数）の名前をカンマで区切って書きます。\n{ }: この波括弧で囲まれた部分が、関数の本体です。実行したい処理をこの中に記述します。\nreturn(値): 関数の処理結果として何を返す（出力する）かを指定します。return() を書かなくても、最後に評価された値が自動的に返り値となりますが、コードを分かりやすくするために明示的に書くことが推奨されます。",
    "crumbs": [
      "基礎",
      "R関数の使い方と作り方"
    ]
  },
  {
    "objectID": "kiso/05-functions.html#簡単な関数を作って使ってみよう",
    "href": "kiso/05-functions.html#簡単な関数を作って使ってみよう",
    "title": "R関数の使い方と作り方",
    "section": "簡単な関数を作って使ってみよう",
    "text": "簡単な関数を作って使ってみよう\n2つの数値を足し算する関数\nadd_numbers という名前で、a と b という2つの数値を引数として受け取り、その合計を返す関数を作ってみましょう。\n\n# 関数の定義\nadd_numbers &lt;- function(a, b) {\n  result &lt;- a + b\n  return(result)\n}\n\nこのコードを実行しても、コンソールには何も表示されません。これは関数の「設計図」を作っただけで、まだ実行していないからです。 Environment タブに関数名 add_numbers が追加されていることを確認してください。\n作成した関数の使い方：\n関数を使うことを「呼び出す (call)」と言います。関数名を書き、() の中に具体的な値（引数）を入れて実行します。\n\n# 作成した関数を呼び出す\nsum1 &lt;- add_numbers(a = 5, b = 10)\nsum1 # 結果を表示\n\n[1] 15\n\nsum2 &lt;- add_numbers(100, 200) # 引数名は省略してもOK\nsum2\n\n[1] 300",
    "crumbs": [
      "基礎",
      "R関数の使い方と作り方"
    ]
  },
  {
    "objectID": "kiso/05-functions.html#引数のデフォルト値",
    "href": "kiso/05-functions.html#引数のデフォルト値",
    "title": "R関数の使い方と作り方",
    "section": "引数のデフォルト値",
    "text": "引数のデフォルト値\n引数には、あらかじめデフォルト値を設定しておくことができます。これにより、関数を呼び出す際に引数が指定されなかった場合に、そのデフォルト値が自動的に使われます。\n挨拶をする関数\n“Hello” という挨拶をデフォルトにしつつ、“Good morning” など他の挨拶も指定できるようにしてみましょう。\n\n# \"greeting\" 引数にデフォルト値を設定\ngreet &lt;- function(name, greeting = \"Hello\") {\n  message &lt;- paste(greeting, name, sep = \", \") # pasteは文字列を結合する関数\n  return(message)\n}\n\n# デフォルト値を使って呼び出す\ngreet(name = \"Alice\")\n\n[1] \"Hello, Alice\"\n\n# デフォルト値を上書きして呼び出す\ngreet(name = \"Bob\", greeting = \"Good morning\")\n\n[1] \"Good morning, Bob\"",
    "crumbs": [
      "基礎",
      "R関数の使い方と作り方"
    ]
  },
  {
    "objectID": "kiso/05-functions.html#演習",
    "href": "kiso/05-functions.html#演習",
    "title": "R関数の使い方と作り方",
    "section": "演習",
    "text": "演習\n\n数値 x を引数として受け取り、その数値を2乗した結果を返す square_number という名前の関数を作成してください。\n作成した square_number 関数を使って、15 を2乗した結果を求めてください。\n長方形の縦 height と横 width を引数として受け取り、その面積を計算して返す calculate_rectangle_area という関数を作成してください。 4.作成した calculate_rectangle_area 関数を使い、縦が 20、横が 30 の長方形の面積を計算してください。",
    "crumbs": [
      "基礎",
      "R関数の使い方と作り方"
    ]
  },
  {
    "objectID": "tidyverse/10-dplyr.html",
    "href": "tidyverse/10-dplyr.html",
    "title": "フィルタ・セレクト・アレンジ",
    "section": "",
    "text": "では、dplyr パッケージの中心的な機能である「データのサブセット化」と「順序の整理」を紹介します。 tidyverse を読み込んで、R に組み込まれている starwars データセットを使いながら、以下の4つの基本的な「動詞」をマスターしましょう。\n\nselect(): 列を選ぶ\nfilter(): 行を絞り込む\narrange(): 行を並べ替える\nrelocate(): 列の順序を変更する\n\n\nlibrary(tidyverse)",
    "crumbs": [
      "tidyverse",
      "フィルタ・セレクト・アレンジ"
    ]
  },
  {
    "objectID": "tidyverse/10-dplyr.html#dplyr-基本操作データの選択並べ替え整形",
    "href": "tidyverse/10-dplyr.html#dplyr-基本操作データの選択並べ替え整形",
    "title": "フィルタ・セレクト・アレンジ",
    "section": "",
    "text": "では、dplyr パッケージの中心的な機能である「データのサブセット化」と「順序の整理」を紹介します。 tidyverse を読み込んで、R に組み込まれている starwars データセットを使いながら、以下の4つの基本的な「動詞」をマスターしましょう。\n\nselect(): 列を選ぶ\nfilter(): 行を絞り込む\narrange(): 行を並べ替える\nrelocate(): 列の順序を変更する\n\n\nlibrary(tidyverse)",
    "crumbs": [
      "tidyverse",
      "フィルタ・セレクト・アレンジ"
    ]
  },
  {
    "objectID": "tidyverse/10-dplyr.html#select-列を選ぶ",
    "href": "tidyverse/10-dplyr.html#select-列を選ぶ",
    "title": "フィルタ・セレクト・アレンジ",
    "section": "select(): 列を選ぶ",
    "text": "select(): 列を選ぶ\nselect() は、ティブル (tibble) から必要な列だけを選び出すための関数です。\n分析に必要な列だけを残したり、特定の列を除外したりする場合に使います。\n\n# starwarsデータから、名前、身長、体重の列だけを選ぶ\nstarwars |&gt; select(name, height, mass)\n\n# A tibble: 87 × 3\n   name               height  mass\n   &lt;chr&gt;               &lt;int&gt; &lt;dbl&gt;\n 1 Luke Skywalker        172    77\n 2 C-3PO                 167    75\n 3 R2-D2                  96    32\n 4 Darth Vader           202   136\n 5 Leia Organa           150    49\n 6 Owen Lars             178   120\n 7 Beru Whitesun Lars    165    75\n 8 R5-D4                  97    32\n 9 Biggs Darklighter     183    84\n10 Obi-Wan Kenobi        182    77\n# ℹ 77 more rows\n\n# name列からmass列まで、連続した列を選ぶ\nstarwars |&gt; select(name:mass)\n\n# A tibble: 87 × 3\n   name               height  mass\n   &lt;chr&gt;               &lt;int&gt; &lt;dbl&gt;\n 1 Luke Skywalker        172    77\n 2 C-3PO                 167    75\n 3 R2-D2                  96    32\n 4 Darth Vader           202   136\n 5 Leia Organa           150    49\n 6 Owen Lars             178   120\n 7 Beru Whitesun Lars    165    75\n 8 R5-D4                  97    32\n 9 Biggs Darklighter     183    84\n10 Obi-Wan Kenobi        182    77\n# ℹ 77 more rows\n\n# hair_color列を「除外」する\nstarwars |&gt; select(-hair_color)\n\n# A tibble: 87 × 13\n   name      height  mass skin_color eye_color birth_year sex   gender homeworld\n   &lt;chr&gt;      &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;    \n 1 Luke Sky…    172    77 fair       blue            19   male  mascu… Tatooine \n 2 C-3PO        167    75 gold       yellow         112   none  mascu… Tatooine \n 3 R2-D2         96    32 white, bl… red             33   none  mascu… Naboo    \n 4 Darth Va…    202   136 white      yellow          41.9 male  mascu… Tatooine \n 5 Leia Org…    150    49 light      brown           19   fema… femin… Alderaan \n 6 Owen Lars    178   120 light      blue            52   male  mascu… Tatooine \n 7 Beru Whi…    165    75 light      blue            47   fema… femin… Tatooine \n 8 R5-D4         97    32 white, red red             NA   none  mascu… Tatooine \n 9 Biggs Da…    183    84 light      brown           24   male  mascu… Tatooine \n10 Obi-Wan …    182    77 fair       blue-gray       57   male  mascu… Stewjon  \n# ℹ 77 more rows\n# ℹ 4 more variables: species &lt;chr&gt;, films &lt;list&gt;, vehicles &lt;list&gt;,\n#   starships &lt;list&gt;\n\n# \"color\"で終わる名前の列をすべて選ぶ\nstarwars |&gt; select(ends_with(\"color\"))\n\n# A tibble: 87 × 3\n   hair_color    skin_color  eye_color\n   &lt;chr&gt;         &lt;chr&gt;       &lt;chr&gt;    \n 1 blond         fair        blue     \n 2 &lt;NA&gt;          gold        yellow   \n 3 &lt;NA&gt;          white, blue red      \n 4 none          white       yellow   \n 5 brown         light       brown    \n 6 brown, grey   light       blue     \n 7 brown         light       blue     \n 8 &lt;NA&gt;          white, red  red      \n 9 black         light       brown    \n10 auburn, white fair        blue-gray\n# ℹ 77 more rows\n\n\n\nselect() で使える便利なヘルパー関数\nselect() で一つずつ列の名前を指定するのは、列が多い場合に大変です。 dplyr には、特定のパターンに一致する列名を効率よく選ぶためのヘルパー関数が用意されており、これらを select() や {relocate()} の中で使うことができます。\n\neverything(): まだ選択されていない残りのすべての列を選びます。\nstarts_with(): 指定した文字で始まる名前の列をすべて選びます。\nends_with(): 指定した文字で終わる名前の列をすべて選びます。\ncontains(): 名前に指定した文字が含まれる列をすべて選びます（位置は問いません）。\nmatches(): 正規表現 (Regular Expression) という、文字列の高度なパターンマッチング言語を使って列名を選びます。contains() などが単純な単語を探すのに対し、matches() は「A または B を含む」や「s で始まり t で終わる」といった、より複雑なルールを指定できます。\nwhere(): 列のデータ型（数値、文字列など）に基づいて列を選ぶ、少し高度ですが強力なヘルパーです。\n\nwhere(is.numeric): 数値型の列をすべて選びます。\nwhere(is.character): 文字列型の列をすべて選びます。\n\n\n\n# 文字列型の列をすべて選ぶ\nstarwars |&gt; select(where(is.character))\n\n# A tibble: 87 × 8\n   name           hair_color skin_color eye_color sex   gender homeworld species\n   &lt;chr&gt;          &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;chr&gt;  \n 1 Luke Skywalker blond      fair       blue      male  mascu… Tatooine  Human  \n 2 C-3PO          &lt;NA&gt;       gold       yellow    none  mascu… Tatooine  Droid  \n 3 R2-D2          &lt;NA&gt;       white, bl… red       none  mascu… Naboo     Droid  \n 4 Darth Vader    none       white      yellow    male  mascu… Tatooine  Human  \n 5 Leia Organa    brown      light      brown     fema… femin… Alderaan  Human  \n 6 Owen Lars      brown, gr… light      blue      male  mascu… Tatooine  Human  \n 7 Beru Whitesun… brown      light      blue      fema… femin… Tatooine  Human  \n 8 R5-D4          &lt;NA&gt;       white, red red       none  mascu… Tatooine  Droid  \n 9 Biggs Darklig… black      light      brown     male  mascu… Tatooine  Human  \n10 Obi-Wan Kenobi auburn, w… fair       blue-gray male  mascu… Stewjon   Human  \n# ℹ 77 more rows",
    "crumbs": [
      "tidyverse",
      "フィルタ・セレクト・アレンジ"
    ]
  },
  {
    "objectID": "tidyverse/10-dplyr.html#filter-行を絞り込む",
    "href": "tidyverse/10-dplyr.html#filter-行を絞り込む",
    "title": "フィルタ・セレクト・アレンジ",
    "section": "filter(): 行を絞り込む",
    "text": "filter(): 行を絞り込む\nfilter() は、指定した条件に一致する行だけを絞り込むための関数です。\nデータの特定のサブセット（例：特定の種族のキャラクター、特定の条件を満たす観測など）を抽出する際に使います。\n\n# 種族 (species) が \"Human\" のキャラクターだけを絞り込む\nstarwars |&gt; filter(species == \"Human\")\n\n# A tibble: 35 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   &lt;chr&gt;     &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n 1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu…\n 2 Darth V…    202   136 none       white      yellow          41.9 male  mascu…\n 3 Leia Or…    150    49 brown      light      brown           19   fema… femin…\n 4 Owen La…    178   120 brown, gr… light      blue            52   male  mascu…\n 5 Beru Wh…    165    75 brown      light      blue            47   fema… femin…\n 6 Biggs D…    183    84 black      light      brown           24   male  mascu…\n 7 Obi-Wan…    182    77 auburn, w… fair       blue-gray       57   male  mascu…\n 8 Anakin …    188    84 blond      fair       blue            41.9 male  mascu…\n 9 Wilhuff…    180    NA auburn, g… fair       blue            64   male  mascu…\n10 Han Solo    180    80 brown      fair       brown           29   male  mascu…\n# ℹ 25 more rows\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n# 身長 (height) が180cmより大きいキャラクターを絞り込む\nstarwars |&gt; filter(height &gt; 180)\n\n# A tibble: 39 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   &lt;chr&gt;     &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n 1 Darth V…    202 136   none       white      yellow          41.9 male  mascu…\n 2 Biggs D…    183  84   black      light      brown           24   male  mascu…\n 3 Obi-Wan…    182  77   auburn, w… fair       blue-gray       57   male  mascu…\n 4 Anakin …    188  84   blond      fair       blue            41.9 male  mascu…\n 5 Chewbac…    228 112   brown      unknown    blue           200   male  mascu…\n 6 Boba Fe…    183  78.2 black      fair       brown           31.5 male  mascu…\n 7 IG-88       200 140   none       metal      red             15   none  mascu…\n 8 Bossk       190 113   none       green      red             53   male  mascu…\n 9 Qui-Gon…    193  89   brown      fair       blue            92   male  mascu…\n10 Nute Gu…    191  90   none       mottled g… red             NA   male  mascu…\n# ℹ 29 more rows\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n# 複数の条件を組み合わせる (種族がHuman「かつ」出身惑星がTatooine)\n# カンマ(,)は「かつ」(AND) を意味します\nstarwars |&gt;  filter(species == \"Human\", homeworld == \"Tatooine\")\n\n# A tibble: 8 × 14\n  name      height  mass hair_color skin_color eye_color birth_year sex   gender\n  &lt;chr&gt;      &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n1 Luke Sky…    172    77 blond      fair       blue            19   male  mascu…\n2 Darth Va…    202   136 none       white      yellow          41.9 male  mascu…\n3 Owen Lars    178   120 brown, gr… light      blue            52   male  mascu…\n4 Beru Whi…    165    75 brown      light      blue            47   fema… femin…\n5 Biggs Da…    183    84 black      light      brown           24   male  mascu…\n6 Anakin S…    188    84 blond      fair       blue            41.9 male  mascu…\n7 Shmi Sky…    163    NA black      fair       brown           72   fema… femin…\n8 Cliegg L…    183    NA brown      fair       blue            82   male  mascu…\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n# 複数の条件のいずれかを満たす (髪の色が \"blond\" 「または」 \"brown\")\n# | は「または」(OR) を意味します\nstarwars |&gt;  filter(hair_color == \"blond\" | hair_color == \"brown\")\n\n# A tibble: 21 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   &lt;chr&gt;     &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n 1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu…\n 2 Leia Or…    150    49 brown      light      brown           19   fema… femin…\n 3 Beru Wh…    165    75 brown      light      blue            47   fema… femin…\n 4 Anakin …    188    84 blond      fair       blue            41.9 male  mascu…\n 5 Chewbac…    228   112 brown      unknown    blue           200   male  mascu…\n 6 Han Solo    180    80 brown      fair       brown           29   male  mascu…\n 7 Wedge A…    170    77 brown      fair       hazel           21   male  mascu…\n 8 Jek Ton…    180   110 brown      fair       blue            NA   &lt;NA&gt;  &lt;NA&gt;  \n 9 Arvel C…     NA    NA brown      fair       brown           NA   male  mascu…\n10 Wicket …     88    20 brown      brown      brown            8   male  mascu…\n# ℹ 11 more rows\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;",
    "crumbs": [
      "tidyverse",
      "フィルタ・セレクト・アレンジ"
    ]
  },
  {
    "objectID": "tidyverse/10-dplyr.html#filter-のヘルパー関数",
    "href": "tidyverse/10-dplyr.html#filter-のヘルパー関数",
    "title": "フィルタ・セレクト・アレンジ",
    "section": "filter() のヘルパー関数",
    "text": "filter() のヘルパー関数\n\nis.na(): データ分析では欠損値 NA (Not Available) の扱いは非常に重要です。is.na() を使うと、特定の列が NA である行、あるいは NA ではない行を簡単に絞り込めます。\nstr_detect(): stringr パッケージ (tidyverse に含まれる) の関数で、文字列の中に 特定のパターンが含まれているか を判定します。完全一致 (==) よりも柔軟な検索が可能です。\nbetween(): 数値がある範囲の 間にあるか を判定します。列名 &gt;= 最小値 & 列名 &lt;= 最大値 と書くよりも直感的で分かりやすいです。\n%in%: | (または) を何度も書く代わりに、指定した複数の値の いずれかに含まれるか を判定します。コードが非常にすっきりと読みやすくなります。\n\n\nstarwars |&gt; filter(is.na(mass))\n\n# A tibble: 28 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   &lt;chr&gt;     &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n 1 Wilhuff…    180    NA auburn, g… fair       blue              64 male  mascu…\n 2 Mon Mot…    150    NA auburn     fair       blue              48 fema… femin…\n 3 Arvel C…     NA    NA brown      fair       brown             NA male  mascu…\n 4 Finis V…    170    NA blond      fair       blue              91 male  mascu…\n 5 Rugor N…    206    NA none       green      orange            NA male  mascu…\n 6 Ric Olié    183    NA brown      fair       blue              NA male  mascu…\n 7 Watto       137    NA black      blue, grey yellow            NA male  mascu…\n 8 Quarsh …    183    NA black      dark       brown             62 male  mascu…\n 9 Shmi Sk…    163    NA black      fair       brown             72 fema… femin…\n10 Bib For…    180    NA none       pale       pink              NA male  mascu…\n# ℹ 18 more rows\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\nstarwars |&gt; filter(!is.na(mass))\n\n# A tibble: 59 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   &lt;chr&gt;     &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n 1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu…\n 2 C-3PO       167    75 &lt;NA&gt;       gold       yellow         112   none  mascu…\n 3 R2-D2        96    32 &lt;NA&gt;       white, bl… red             33   none  mascu…\n 4 Darth V…    202   136 none       white      yellow          41.9 male  mascu…\n 5 Leia Or…    150    49 brown      light      brown           19   fema… femin…\n 6 Owen La…    178   120 brown, gr… light      blue            52   male  mascu…\n 7 Beru Wh…    165    75 brown      light      blue            47   fema… femin…\n 8 R5-D4        97    32 &lt;NA&gt;       white, red red             NA   none  mascu…\n 9 Biggs D…    183    84 black      light      brown           24   male  mascu…\n10 Obi-Wan…    182    77 auburn, w… fair       blue-gray       57   male  mascu…\n# ℹ 49 more rows\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n#  | をたくさん使う例\nstarwars |&gt; \n  filter(name == \"Luke Skywalker\" | name == \"R2-D2\" | name == \"Darth Vader\")\n\n# A tibble: 3 × 14\n  name      height  mass hair_color skin_color eye_color birth_year sex   gender\n  &lt;chr&gt;      &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n1 Luke Sky…    172    77 blond      fair       blue            19   male  mascu…\n2 R2-D2         96    32 &lt;NA&gt;       white, bl… red             33   none  mascu…\n3 Darth Va…    202   136 none       white      yellow          41.9 male  mascu…\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n# %in% を使うバージョン\ntarget_characters &lt;- c(\"Luke Skywalker\", \"R2-D2\", \"Darth Vader\")\nstarwars |&gt; filter(name %in% target_characters)\n\n# A tibble: 3 × 14\n  name      height  mass hair_color skin_color eye_color birth_year sex   gender\n  &lt;chr&gt;      &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n1 Luke Sky…    172    77 blond      fair       blue            19   male  mascu…\n2 R2-D2         96    32 &lt;NA&gt;       white, bl… red             33   none  mascu…\n3 Darth Va…    202   136 none       white      yellow          41.9 male  mascu…\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n# \"R[0-9]-D[0-9]\"の正規表現に絞り込む\nstarwars |&gt; filter(str_detect(name, \"R[0-9]-D[0-9]\"))\n\n# A tibble: 2 × 14\n  name  height  mass hair_color skin_color  eye_color birth_year sex   gender   \n  &lt;chr&gt;  &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;    \n1 R2-D2     96    32 &lt;NA&gt;       white, blue red               33 none  masculine\n2 R5-D4     97    32 &lt;NA&gt;       white, red  red               NA none  masculine\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n# mass が 90 から 120 の間の時に絞り込む\nstarwars |&gt; filter(between(mass, 90, 120))\n\n# A tibble: 6 × 14\n  name      height  mass hair_color skin_color eye_color birth_year sex   gender\n  &lt;chr&gt;      &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n1 Owen Lars    178   120 brown, gr… light      blue              52 male  mascu…\n2 Chewbacca    228   112 brown      unknown    blue             200 male  mascu…\n3 Jek Tono…    180   110 brown      fair       blue              NA &lt;NA&gt;  &lt;NA&gt;  \n4 Bossk        190   113 none       green      red               53 male  mascu…\n5 Nute Gun…    191    90 none       mottled g… red               NA male  mascu…\n6 Dexter J…    198   102 none       brown      yellow            NA male  mascu…\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n# mass が NA の時に絞り込む\nstarwars |&gt;  filter(is.na(mass))\n\n# A tibble: 28 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   &lt;chr&gt;     &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n 1 Wilhuff…    180    NA auburn, g… fair       blue              64 male  mascu…\n 2 Mon Mot…    150    NA auburn     fair       blue              48 fema… femin…\n 3 Arvel C…     NA    NA brown      fair       brown             NA male  mascu…\n 4 Finis V…    170    NA blond      fair       blue              91 male  mascu…\n 5 Rugor N…    206    NA none       green      orange            NA male  mascu…\n 6 Ric Olié    183    NA brown      fair       blue              NA male  mascu…\n 7 Watto       137    NA black      blue, grey yellow            NA male  mascu…\n 8 Quarsh …    183    NA black      dark       brown             62 male  mascu…\n 9 Shmi Sk…    163    NA black      fair       brown             72 fema… femin…\n10 Bib For…    180    NA none       pale       pink              NA male  mascu…\n# ℹ 18 more rows\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n# mass が NA じゃない時に絞り込む\nstarwars |&gt;  filter(!is.na(mass))\n\n# A tibble: 59 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   &lt;chr&gt;     &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n 1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu…\n 2 C-3PO       167    75 &lt;NA&gt;       gold       yellow         112   none  mascu…\n 3 R2-D2        96    32 &lt;NA&gt;       white, bl… red             33   none  mascu…\n 4 Darth V…    202   136 none       white      yellow          41.9 male  mascu…\n 5 Leia Or…    150    49 brown      light      brown           19   fema… femin…\n 6 Owen La…    178   120 brown, gr… light      blue            52   male  mascu…\n 7 Beru Wh…    165    75 brown      light      blue            47   fema… femin…\n 8 R5-D4        97    32 &lt;NA&gt;       white, red red             NA   none  mascu…\n 9 Biggs D…    183    84 black      light      brown           24   male  mascu…\n10 Obi-Wan…    182    77 auburn, w… fair       blue-gray       57   male  mascu…\n# ℹ 49 more rows\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;",
    "crumbs": [
      "tidyverse",
      "フィルタ・セレクト・アレンジ"
    ]
  },
  {
    "objectID": "tidyverse/10-dplyr.html#arrange-行を並べ替える",
    "href": "tidyverse/10-dplyr.html#arrange-行を並べ替える",
    "title": "フィルタ・セレクト・アレンジ",
    "section": "arrange(): 行を並べ替える",
    "text": "arrange(): 行を並べ替える\narrange() は、指定した列の値に基づいて行の順序を並べ替えるための関数です。\nデフォルトでは昇順（小さい順、アルファベット順）に並べ替えます。降順にするには desc() を使います。\n\n# 体重 (mass) が軽い順に並べ替える\nstarwars |&gt; arrange(mass)\n\n# A tibble: 87 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   &lt;chr&gt;     &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n 1 Ratts T…     79    15 none       grey, blue unknown           NA male  mascu…\n 2 Yoda         66    17 white      green      brown            896 male  mascu…\n 3 Wicket …     88    20 brown      brown      brown              8 male  mascu…\n 4 R2-D2        96    32 &lt;NA&gt;       white, bl… red               33 none  mascu…\n 5 R5-D4        97    32 &lt;NA&gt;       white, red red               NA none  mascu…\n 6 Sebulba     112    40 none       grey, red  orange            NA male  mascu…\n 7 Padmé A…    185    45 brown      light      brown             46 fema… femin…\n 8 Dud Bolt     94    45 none       blue, grey yellow            NA male  mascu…\n 9 Wat Tam…    193    48 none       green, gr… unknown           NA male  mascu…\n10 Sly Moo…    178    48 none       pale       white             NA &lt;NA&gt;  &lt;NA&gt;  \n# ℹ 77 more rows\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n# 身長 (height) が高い順に並べ替える\nstarwars |&gt; arrange(desc(height))\n\n# A tibble: 87 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   &lt;chr&gt;     &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n 1 Yarael …    264    NA none       white      yellow          NA   male  mascu…\n 2 Tarfful     234   136 brown      brown      blue            NA   male  mascu…\n 3 Lama Su     229    88 none       grey       black           NA   male  mascu…\n 4 Chewbac…    228   112 brown      unknown    blue           200   male  mascu…\n 5 Roos Ta…    224    82 none       grey       orange          NA   male  mascu…\n 6 Grievous    216   159 none       brown, wh… green, y…       NA   male  mascu…\n 7 Taun We     213    NA none       grey       black           NA   fema… femin…\n 8 Rugor N…    206    NA none       green      orange          NA   male  mascu…\n 9 Tion Me…    206    80 none       grey       black           NA   male  mascu…\n10 Darth V…    202   136 none       white      yellow          41.9 male  mascu…\n# ℹ 77 more rows\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n# 複数の列で並べ替える (種族で並べ替え、同じ種族の中では身長が高い順に並べ替える)\nstarwars |&gt; arrange(species, desc(height))\n\n# A tibble: 87 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   &lt;chr&gt;     &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n 1 Ratts T…     79    15 none       grey, blue unknown           NA male  mascu…\n 2 Dexter …    198   102 none       brown      yellow            NA male  mascu…\n 3 Ki-Adi-…    198    82 white      pale       yellow            92 male  mascu…\n 4 Mas Ame…    196    NA none       blue       blue              NA male  mascu…\n 5 Zam Wes…    168    55 blonde     fair, gre… yellow            NA fema… femin…\n 6 IG-88       200   140 none       metal      red               15 none  mascu…\n 7 C-3PO       167    75 &lt;NA&gt;       gold       yellow           112 none  mascu…\n 8 R5-D4        97    32 &lt;NA&gt;       white, red red               NA none  mascu…\n 9 R2-D2        96    32 &lt;NA&gt;       white, bl… red               33 none  mascu…\n10 R4-P17       96    NA none       silver, r… red, blue         NA none  femin…\n# ℹ 77 more rows\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;",
    "crumbs": [
      "tidyverse",
      "フィルタ・セレクト・アレンジ"
    ]
  },
  {
    "objectID": "tidyverse/10-dplyr.html#relocate-列の順序を変更する",
    "href": "tidyverse/10-dplyr.html#relocate-列の順序を変更する",
    "title": "フィルタ・セレクト・アレンジ",
    "section": "relocate(): 列の順序を変更する",
    "text": "relocate(): 列の順序を変更する\nrelocate() は、データフレームの列の順序を自由に変更するための関数です。\n特定の列を先頭に持ってきたり、関連する列を隣同士に並べたりして、データをみやすくするのに役立ちます。\n\n# `homeworld` と `species` の列を先頭に移動する\nstarwars |&gt; relocate(homeworld, species)\n\n# A tibble: 87 × 14\n   homeworld species name           height  mass hair_color skin_color eye_color\n   &lt;chr&gt;     &lt;chr&gt;   &lt;chr&gt;           &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;    \n 1 Tatooine  Human   Luke Skywalker    172    77 blond      fair       blue     \n 2 Tatooine  Droid   C-3PO             167    75 &lt;NA&gt;       gold       yellow   \n 3 Naboo     Droid   R2-D2              96    32 &lt;NA&gt;       white, bl… red      \n 4 Tatooine  Human   Darth Vader       202   136 none       white      yellow   \n 5 Alderaan  Human   Leia Organa       150    49 brown      light      brown    \n 6 Tatooine  Human   Owen Lars         178   120 brown, gr… light      blue     \n 7 Tatooine  Human   Beru Whitesun…    165    75 brown      light      blue     \n 8 Tatooine  Droid   R5-D4              97    32 &lt;NA&gt;       white, red red      \n 9 Tatooine  Human   Biggs Darklig…    183    84 black      light      brown    \n10 Stewjon   Human   Obi-Wan Kenobi    182    77 auburn, w… fair       blue-gray\n# ℹ 77 more rows\n# ℹ 6 more variables: birth_year &lt;dbl&gt;, sex &lt;chr&gt;, gender &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n# `birth_year` 列を `name` 列のすぐ後ろに移動する\nstarwars |&gt; relocate(birth_year, .after = name)\n\n# A tibble: 87 × 14\n   name     birth_year height  mass hair_color skin_color eye_color sex   gender\n   &lt;chr&gt;         &lt;dbl&gt;  &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt; \n 1 Luke Sk…       19      172    77 blond      fair       blue      male  mascu…\n 2 C-3PO         112      167    75 &lt;NA&gt;       gold       yellow    none  mascu…\n 3 R2-D2          33       96    32 &lt;NA&gt;       white, bl… red       none  mascu…\n 4 Darth V…       41.9    202   136 none       white      yellow    male  mascu…\n 5 Leia Or…       19      150    49 brown      light      brown     fema… femin…\n 6 Owen La…       52      178   120 brown, gr… light      blue      male  mascu…\n 7 Beru Wh…       47      165    75 brown      light      blue      fema… femin…\n 8 R5-D4          NA       97    32 &lt;NA&gt;       white, red red       none  mascu…\n 9 Biggs D…       24      183    84 black      light      brown     male  mascu…\n10 Obi-Wan…       57      182    77 auburn, w… fair       blue-gray male  mascu…\n# ℹ 77 more rows\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n# `gender` 列を `homeworld` 列のすぐ前に移動する\nstarwars |&gt; relocate(gender, .before = homeworld)\n\n# A tibble: 87 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   &lt;chr&gt;     &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n 1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu…\n 2 C-3PO       167    75 &lt;NA&gt;       gold       yellow         112   none  mascu…\n 3 R2-D2        96    32 &lt;NA&gt;       white, bl… red             33   none  mascu…\n 4 Darth V…    202   136 none       white      yellow          41.9 male  mascu…\n 5 Leia Or…    150    49 brown      light      brown           19   fema… femin…\n 6 Owen La…    178   120 brown, gr… light      blue            52   male  mascu…\n 7 Beru Wh…    165    75 brown      light      blue            47   fema… femin…\n 8 R5-D4        97    32 &lt;NA&gt;       white, red red             NA   none  mascu…\n 9 Biggs D…    183    84 black      light      brown           24   male  mascu…\n10 Obi-Wan…    182    77 auburn, w… fair       blue-gray       57   male  mascu…\n# ℹ 77 more rows\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;",
    "crumbs": [
      "tidyverse",
      "フィルタ・セレクト・アレンジ"
    ]
  },
  {
    "objectID": "tidyverse/10-dplyr.html#演習すべてを繋げてみよう",
    "href": "tidyverse/10-dplyr.html#演習すべてを繋げてみよう",
    "title": "フィルタ・セレクト・アレンジ",
    "section": "演習：すべてを繋げてみよう",
    "text": "演習：すべてを繋げてみよう\nstarwars データセットを使って、以下の条件を満たすデータを作成してください。\n\n種族が “Droid” のキャラクターだけを絞り込み (filter)、\nname, model, mass, birth_year の列だけを選び (select)、\nmass が重い順に並べ替え (arrange)、\nmodel 列を先頭に移動させて (relocate) ください。",
    "crumbs": [
      "tidyverse",
      "フィルタ・セレクト・アレンジ"
    ]
  },
  {
    "objectID": "tidyverse/30-readr.html",
    "href": "tidyverse/30-readr.html",
    "title": "データの読み書き",
    "section": "",
    "text": "データ分析の最初のステップは、分析したいデータをRに読み込むことです。 readr は tidyverse の一部で、CSV ファイルのような「長方形」のテキストデータを R に高速かつ正確に読み込むためのパッケージです。\nBase R にも read.csv() という関数がありますが、readr を使うことには以下のようなメリットがあります。",
    "crumbs": [
      "tidyverse",
      "データの読み書き"
    ]
  },
  {
    "objectID": "tidyverse/30-readr.html#read_csvwrite_csv-csvファイルの読み書き",
    "href": "tidyverse/30-readr.html#read_csvwrite_csv-csvファイルの読み書き",
    "title": "データの読み書き",
    "section": "read_csv()・write_csv(): CSVファイルの読み書き",
    "text": "read_csv()・write_csv(): CSVファイルの読み書き\n最もよく使われるのが read_csv() 関数です。 これは、カンマ区切り（Comma Separated Values）のファイルを読み込み、tibble という tidyverse で使われるデータ形式に変換します。\nまずは tidyverse を読み込みます。\n\nlibrary(tidyverse)\n\n基本的な使い方\n使い方は非常にシンプルで、ファイルへのパス（場所）を引数として渡すだけです。\n\n# 例として、まず R のデータフレームをCSVファイルとして書き出してみます\nsample_data &lt;- tibble(\n  id = 1:3,\n  name = c(\"Alice\", \"Bob\", \"Charlie\"),\n  score = c(85.5, 92.0, 78.5)\n)\n\nCSV を書き込むには、write_csv() を使います。\n\n# 書き出したい tibble と書き込みたいパスとファイル名を渡します\nwrite_csv(sample_data, \"my_sample_data.csv\")\n\nCSV のを読み込むには、read_csv() を使います。\n\n# 今書き出したCSVファイルを読み込む\ndf &lt;- read_csv(\"my_sample_data.csv\")\n\nread_csv() を実行すると、各列がどのデータ型（chr, dbl, int など）として認識されたかがコンソールに表示されます。\n\n\n\n\n\n\nNoteファイルパスの問題\n\n\n\nRスクリプトで read_csv(\"data/my_sample_data.csv\") のようにファイルパスを指定すると、そのスクリプトを誰かと共有したり、別のPCで実行したり、ファイルの場所を移動したりした際に、パスが通らなくなりエラーが頻発します。\nこれは、Rがどのフォルダを基準にファイルを探しているか（ワーキングディレクトリ）が、実行環境によって変わってしまうためです。この問題を解決するために setwd(\"C:/Users/...\") のようにワーキングディレクトリを固定する方法もありますが、これは他の人のPCでは動かないため、悪い習慣とされています。\nhere::here() がすべてを解決\nhere パッケージは、この問題をシンプルかつエレガントに解決します。\nメリット:\n\nsetwd() が不要になる: setwd() をスクリプトの冒頭に書く必要が一切なくなります。\nどこでも動く: あなたの PC でも、同僚のPCでも、サーバー上でも、スクリプトを移動しても、同じコードがエラーなく動きます。\n共同作業が楽になる: Git などでプロジェクトを共有する際に、ファイルパスの違いを気にする必要がありません。\n直感的: プロジェクトのルート（一番上の階層）を基準にパスを組み立てるため、非常に分かりやすいです。\n\nhereの仕組み: here は、現在のスクリプトの場所から上の階層に向かって .Rproj ファイルや .git フォルダを探します。それらが見つかった場所を「プロジェクトのルート」と判断し、そこを基準点としてファイルへの絶対パスを安全に構築してくれるのです。\n\n\n\nhere::here() の使い方\nhere() を使うための最も重要な前提は、作業を RStudioプロジェクト (.Rproj ファイル) で管理することです。\nまだインストールしていない場合は、一度だけコンソールで実行します。\n\ninstall.packages(\"here\")\n\nでは、ファイルパスを組み立てましょう。\nhere(\"フォルダ名\", \"ファイル名\") のように、プロジェクトのルートからの道のりをカンマで区切って指定します。\n\nfilename &lt;- here::here(\"data\", \"my_sample_data.csv\")\nwrite_csv(sample_data, filename)\ndf &lt;- read_csv(filename)\n\n\n:: は、特定のパッケージに属する関数を直接指定して呼び出すための演算子です。 here::here()は、「here という名前のパッケージの中にある here という名前の関数」という意味になります。\nなぜ :: を使うのか？\n:: を使うことには、主に2つの大きなメリットがあります。\n\n関数の名前の衝突（競合）を避ける\n\nRでは、異なるパッケージが同じ名前の関数を持っていることがあります。 例えば、dplyr パッケージとRの基本機能（stats パッケージ）は、どちらも filter() という名前の関数を持っています。\nもし library(dplyr)を実行せずに filter() を使うと、意図せず基本機能の filter() が動いてしまうかもしれません。dplyr::filter() と書けば、「dplyr の filter() を使います」と明示的に宣言できるため、このような混乱やエラーを防げます。\n\nコードの可読性が上がる\n\nhere::here() と書かれているコードを見れば、誰でも「ああ、これは here パッケージの機能を使っているんだな」と一目で分かります。library() で一度にたくさんのパッケージを読み込むと、どの関数がどのパッケージ由来なのか分かりにくくなることがあります。",
    "crumbs": [
      "tidyverse",
      "データの読み書き"
    ]
  },
  {
    "objectID": "tidyverse/30-readr.html#read_tsv-tsvファイルを読み込む",
    "href": "tidyverse/30-readr.html#read_tsv-tsvファイルを読み込む",
    "title": "データの読み書き",
    "section": "read_tsv(): TSVファイルを読み込む",
    "text": "read_tsv(): TSVファイルを読み込む\nread_tsv() は、タブ区切り（Tab Separated Values）のファイルを読み込むための関数です。 基本的な使い方は read_csv() と全く同じです。\n\nfilename = here::here(\"data\", \"my_sample_data.tsv\")\n# タブ区切りのファイルを作成\nwrite_tsv(sample_data, filename)\n\n# TSVファイルを読み込む\ndf_tsv &lt;- read_tsv(filename)",
    "crumbs": [
      "tidyverse",
      "データの読み書き"
    ]
  },
  {
    "objectID": "tidyverse/30-readr.html#read_delim-一般的な区切り文字ファイル",
    "href": "tidyverse/30-readr.html#read_delim-一般的な区切り文字ファイル",
    "title": "データの読み書き",
    "section": "read_delim(): 一般的な区切り文字ファイル",
    "text": "read_delim(): 一般的な区切り文字ファイル\nもしあなたのデータがカンマやタブではなく、セミコロン(;)やパイプ(|)のような特殊な文字で区切られている場合は、read_delim() を使います。 delim 引数で区切り文字を指定します。\n\nfilename = here::here(\"data\", \"my_sample_data.txt\")\n\n# セミコロン区切りのファイルを作成\nwrite_delim(sample_data, filename, delim = \";\")\n\n# セミコロン区切りのファイルを読み込む\ndf_delim &lt;- read_delim(filename, delim = \";\")\n\n列の型を自分で指定する\nreadr は賢く列の型を推測してくれますが、時々間違えることもあります（例：数値のはずが文字列として読み込まれる）。 その場合は col_types 引数を使って、正しい型を手動で指定できます。\ncols() 関数の中に、列ごとに型を指定します。\n\ncol_character(): 文字列型\ncol_integer(): 整数型\ncol_double(): 小数を含む数値型\ncol_logical(): 論理値型 (TRUE/FALSE)\n\n例: id を文字列として、score を整数として読み込んでみる\n\nfilename = here::here(\"data\", \"my_sample_data.csv\")\n\ndf_manual &lt;- read_csv(\n  filename,\n  col_types = cols(\n    id = col_character(),\n    score = col_integer()\n  )\n)",
    "crumbs": [
      "tidyverse",
      "データの読み書き"
    ]
  },
  {
    "objectID": "ggplot2/10-points.html",
    "href": "ggplot2/10-points.html",
    "title": "散布図",
    "section": "",
    "text": "ggplot2 で作図する際の基本は、レイヤー（層）を + で重ねていくことです。 まずは、最も基本的なグラフである散布図を作成し、その過程で ggplot2 の「文法」に慣れていきましょう。\nここでは、R に組み込まれている iris （アヤメ）のデータセットを使います。 このデータには、がくの長さ(Sepal.Length)、がくの幅(Sepal.Width)、花びらの長さ(Petal.Length)、花びらの幅(Petal.Width)、そして品種(Species)の情報が含まれています。",
    "crumbs": [
      "作図 (ggplot2)",
      "散布図"
    ]
  },
  {
    "objectID": "ggplot2/10-points.html#ggplot2-の基礎geom_point-で散布図を描く",
    "href": "ggplot2/10-points.html#ggplot2-の基礎geom_point-で散布図を描く",
    "title": "散布図",
    "section": "",
    "text": "ggplot2 で作図する際の基本は、レイヤー（層）を + で重ねていくことです。 まずは、最も基本的なグラフである散布図を作成し、その過程で ggplot2 の「文法」に慣れていきましょう。\nここでは、R に組み込まれている iris （アヤメ）のデータセットを使います。 このデータには、がくの長さ(Sepal.Length)、がくの幅(Sepal.Width)、花びらの長さ(Petal.Length)、花びらの幅(Petal.Width)、そして品種(Species)の情報が含まれています。",
    "crumbs": [
      "作図 (ggplot2)",
      "散布図"
    ]
  },
  {
    "objectID": "ggplot2/10-points.html#図の骨格を作る",
    "href": "ggplot2/10-points.html#図の骨格を作る",
    "title": "散布図",
    "section": "図の骨格を作る",
    "text": "図の骨格を作る\nggplot2 での作図は、以下の3つの基本要素から始まります。\n\nggplot(): グラフのキャンバスを用意し、使用するデータを指定します。\naes(): エステティック (aesthetics) の略で、データ内のどの変数を、グラフのどの視覚的要素（x軸、y軸、色、形など）に対応させるかを指定します。\ngeom_\\*(): 図形 (geometry) の略で、どのような形のグラフを描くか（点、線、棒など）を指定します。今回は点プロットなので geom_point() を使います。\n\nこれらを + で繋げて、がくの長さと幅の関係を見てみましょう。\n\nggplot(data = iris, \n       aes(\n         x = Sepal.Length, \n         y = Sepal.Width)) +\n  geom_point()\n\n\n\n\n\n\n\n\n##　aes() で色分けする\nggplot2 の真価は、データの変数に基づいて自動で視覚的属性を割り当てられる点にあります。 aes() の中で color = Species と指定するだけで、iris の品種 (Species) ごとに自動で点の色分けと凡例の作成が行われます。\n\nggplot(data = iris, \n       aes(\n         x = Sepal.Length, \n         y = Sepal.Width, \n         color = Species)) +\n  geom_point()",
    "crumbs": [
      "作図 (ggplot2)",
      "散布図"
    ]
  },
  {
    "objectID": "ggplot2/10-points.html#aes-で形やサイズも変える",
    "href": "ggplot2/10-points.html#aes-で形やサイズも変える",
    "title": "散布図",
    "section": "aes() で形やサイズも変える",
    "text": "aes() で形やサイズも変える\n同様に、shape (形) や size (大きさ) などの属性も aes() の中で指定できます。\n\nggplot(data = iris, \n       aes(\n         x = Sepal.Length, \n         y = Sepal.Width, \n         color = Species, \n         shape = Species)) +\n  geom_point(size = 3) # 点の基本サイズを少し大きくする",
    "crumbs": [
      "作図 (ggplot2)",
      "散布図"
    ]
  },
  {
    "objectID": "ggplot2/10-points.html#全体の色や透明度を固定する",
    "href": "ggplot2/10-points.html#全体の色や透明度を固定する",
    "title": "散布図",
    "section": "全体の色や透明度を固定する",
    "text": "全体の色や透明度を固定する\nもし、データに応じて色を変えるのではなく、すべての点の色を特定の色に固定したい場合は、aes() の外で指定します。これは ggplot2 を使う上で非常に重要なルールです。\nalpha は透明度を指定する属性で、0 (完全に透明) から 1 (完全に不透明) の間の値を指定します。点が重なっている場合に有効です。\n\nggplot(data = iris, \n       aes(\n         x = Sepal.Length, \n         y = Sepal.Width)) +\n  geom_point(\n    color = \"blue\",\n    size = 3, \n    alpha = 0.5)",
    "crumbs": [
      "作図 (ggplot2)",
      "散布図"
    ]
  }
]